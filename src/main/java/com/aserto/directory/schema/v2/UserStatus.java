// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aserto/directory/schema/v2/user.proto

package com.aserto.directory.schema.v2;

/**
 * Protobuf enum {@code aserto.directory.schema.v2.UserStatus}
 */
public enum UserStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * User status undefined
   * </pre>
   *
   * <code>USER_STATUS_UNKNOWN = 0;</code>
   */
  USER_STATUS_UNKNOWN(0),
  /**
   * <pre>
   * Staged status, is when the user object is first created, before the activation flow is initiated, or if there is a pending admin action.
   * </pre>
   *
   * <code>USER_STATUS_STAGED = 1;</code>
   */
  USER_STATUS_STAGED(1),
  /**
   * <pre>
   * Provisioned status, is when the user object is provisioned, but the user has not provided verification by clicking through the activation email or provided a password.
   * </pre>
   *
   * <code>USER_STATUS_PROVISIONED = 2;</code>
   */
  USER_STATUS_PROVISIONED(2),
  /**
   * <pre>
   * Active status, is when:
   * </pre>
   *
   * <code>USER_STATUS_ACTIVE = 3;</code>
   */
  USER_STATUS_ACTIVE(3),
  /**
   * <pre>
   *  * An admin adds a user and sets the user password without requiring email verification.
   *  * An admin adds a user, sets the user password, and requires the user to set their password when they first sign-in.
   *  * A user self-registers into a custom app or IDP and email verification is not required.
   *  * An admin explicitly activates the user.
   * </pre>
   *
   * <code>USER_STATUS_RECOVERY = 4;</code>
   */
  USER_STATUS_RECOVERY(4),
  /**
   * <pre>
   * Password expired, status when the users' password has expired and the account requires an update to the password before a user is granted access.
   * </pre>
   *
   * <code>USER_STATUS_PASSWORD_EXPIRED = 5;</code>
   */
  USER_STATUS_PASSWORD_EXPIRED(5),
  /**
   * <pre>
   * Locked out status, is when the user exceeds the number of login attempts defined in the login policy.
   * </pre>
   *
   * <code>USER_STATUS_LOCKED_OUT = 6;</code>
   */
  USER_STATUS_LOCKED_OUT(6),
  /**
   * <pre>
   * Suspended status, when an admin explicitly suspends the user account.
   * </pre>
   *
   * <code>USER_STATUS_SUSPENDED = 7;</code>
   */
  USER_STATUS_SUSPENDED(7),
  /**
   * <pre>
   * Deprovisioned status, is when an administrator explicitly deactivates or deprovisions/deletes the account.
   * </pre>
   *
   * <code>USER_STATUS_DEPROVISIONED = 8;</code>
   */
  USER_STATUS_DEPROVISIONED(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * User status undefined
   * </pre>
   *
   * <code>USER_STATUS_UNKNOWN = 0;</code>
   */
  public static final int USER_STATUS_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * Staged status, is when the user object is first created, before the activation flow is initiated, or if there is a pending admin action.
   * </pre>
   *
   * <code>USER_STATUS_STAGED = 1;</code>
   */
  public static final int USER_STATUS_STAGED_VALUE = 1;
  /**
   * <pre>
   * Provisioned status, is when the user object is provisioned, but the user has not provided verification by clicking through the activation email or provided a password.
   * </pre>
   *
   * <code>USER_STATUS_PROVISIONED = 2;</code>
   */
  public static final int USER_STATUS_PROVISIONED_VALUE = 2;
  /**
   * <pre>
   * Active status, is when:
   * </pre>
   *
   * <code>USER_STATUS_ACTIVE = 3;</code>
   */
  public static final int USER_STATUS_ACTIVE_VALUE = 3;
  /**
   * <pre>
   *  * An admin adds a user and sets the user password without requiring email verification.
   *  * An admin adds a user, sets the user password, and requires the user to set their password when they first sign-in.
   *  * A user self-registers into a custom app or IDP and email verification is not required.
   *  * An admin explicitly activates the user.
   * </pre>
   *
   * <code>USER_STATUS_RECOVERY = 4;</code>
   */
  public static final int USER_STATUS_RECOVERY_VALUE = 4;
  /**
   * <pre>
   * Password expired, status when the users' password has expired and the account requires an update to the password before a user is granted access.
   * </pre>
   *
   * <code>USER_STATUS_PASSWORD_EXPIRED = 5;</code>
   */
  public static final int USER_STATUS_PASSWORD_EXPIRED_VALUE = 5;
  /**
   * <pre>
   * Locked out status, is when the user exceeds the number of login attempts defined in the login policy.
   * </pre>
   *
   * <code>USER_STATUS_LOCKED_OUT = 6;</code>
   */
  public static final int USER_STATUS_LOCKED_OUT_VALUE = 6;
  /**
   * <pre>
   * Suspended status, when an admin explicitly suspends the user account.
   * </pre>
   *
   * <code>USER_STATUS_SUSPENDED = 7;</code>
   */
  public static final int USER_STATUS_SUSPENDED_VALUE = 7;
  /**
   * <pre>
   * Deprovisioned status, is when an administrator explicitly deactivates or deprovisions/deletes the account.
   * </pre>
   *
   * <code>USER_STATUS_DEPROVISIONED = 8;</code>
   */
  public static final int USER_STATUS_DEPROVISIONED_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static UserStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static UserStatus forNumber(int value) {
    switch (value) {
      case 0: return USER_STATUS_UNKNOWN;
      case 1: return USER_STATUS_STAGED;
      case 2: return USER_STATUS_PROVISIONED;
      case 3: return USER_STATUS_ACTIVE;
      case 4: return USER_STATUS_RECOVERY;
      case 5: return USER_STATUS_PASSWORD_EXPIRED;
      case 6: return USER_STATUS_LOCKED_OUT;
      case 7: return USER_STATUS_SUSPENDED;
      case 8: return USER_STATUS_DEPROVISIONED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<UserStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      UserStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<UserStatus>() {
          public UserStatus findValueByNumber(int number) {
            return UserStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.aserto.directory.schema.v2.UserProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final UserStatus[] VALUES = values();

  public static UserStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private UserStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:aserto.directory.schema.v2.UserStatus)
}

