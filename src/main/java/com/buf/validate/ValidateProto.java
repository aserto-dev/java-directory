// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buf/validate/validate.proto

// Protobuf Java Version: 3.25.2
package com.buf.validate;

public final class ValidateProto {
  private ValidateProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(com.buf.validate.ValidateProto.message);
    registry.add(com.buf.validate.ValidateProto.oneof);
    registry.add(com.buf.validate.ValidateProto.field);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public static final int MESSAGE_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this message. By default,
   * no validation is performed against a message.
   * </pre>
   *
   * <code>extend .google.protobuf.MessageOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MessageOptions,
      com.buf.validate.MessageConstraints> message = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.buf.validate.MessageConstraints.class,
        com.buf.validate.MessageConstraints.getDefaultInstance());
  public static final int ONEOF_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this oneof. By default,
   * no validation is performed against a oneof.
   * </pre>
   *
   * <code>extend .google.protobuf.OneofOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.OneofOptions,
      com.buf.validate.OneofConstraints> oneof = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.buf.validate.OneofConstraints.class,
        com.buf.validate.OneofConstraints.getDefaultInstance());
  public static final int FIELD_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this field. By default,
   * no validation is performed against a field.
   * </pre>
   *
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      com.buf.validate.FieldConstraints> field = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.buf.validate.FieldConstraints.class,
        com.buf.validate.FieldConstraints.getDefaultInstance());
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MessageConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_MessageConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_OneofConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_OneofConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FieldConstraints_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_FieldConstraints_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FloatRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_FloatRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DoubleRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_DoubleRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Int32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Int64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_UInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_UInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Fixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_Fixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SFixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_SFixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BoolRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_BoolRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_StringRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_StringRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BytesRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_BytesRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_EnumRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_EnumRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_RepeatedRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_RepeatedRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MapRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_MapRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_AnyRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_AnyRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DurationRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_DurationRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_TimestampRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buf_validate_TimestampRules_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033buf/validate/validate.proto\022\014buf.valid" +
      "ate\032\035buf/validate/expression.proto\032\037buf/" +
      "validate/priv/private.proto\032 google/prot" +
      "obuf/descriptor.proto\032\036google/protobuf/d" +
      "uration.proto\032\037google/protobuf/timestamp" +
      ".proto\"n\n\022MessageConstraints\022\037\n\010disabled" +
      "\030\001 \001(\010H\000R\010disabled\210\001\001\022*\n\003cel\030\003 \003(\0132\030.buf" +
      ".validate.ConstraintR\003celB\013\n\t_disabled\"@" +
      "\n\020OneofConstraints\022\037\n\010required\030\001 \001(\010H\000R\010" +
      "required\210\001\001B\013\n\t_required\"\247\n\n\020FieldConstr" +
      "aints\022*\n\003cel\030\027 \003(\0132\030.buf.validate.Constr" +
      "aintR\003cel\022\030\n\007skipped\030\030 \001(\010R\007skipped\022\032\n\010r" +
      "equired\030\031 \001(\010R\010required\022%\n\014ignore_empty\030" +
      "\032 \001(\010B\002\030\001R\013ignoreEmpty\022,\n\006ignore\030\033 \001(\0162\024" +
      ".buf.validate.IgnoreR\006ignore\0220\n\005float\030\001 " +
      "\001(\0132\030.buf.validate.FloatRulesH\000R\005float\0223" +
      "\n\006double\030\002 \001(\0132\031.buf.validate.DoubleRule" +
      "sH\000R\006double\0220\n\005int32\030\003 \001(\0132\030.buf.validat" +
      "e.Int32RulesH\000R\005int32\0220\n\005int64\030\004 \001(\0132\030.b" +
      "uf.validate.Int64RulesH\000R\005int64\0223\n\006uint3" +
      "2\030\005 \001(\0132\031.buf.validate.UInt32RulesH\000R\006ui" +
      "nt32\0223\n\006uint64\030\006 \001(\0132\031.buf.validate.UInt" +
      "64RulesH\000R\006uint64\0223\n\006sint32\030\007 \001(\0132\031.buf." +
      "validate.SInt32RulesH\000R\006sint32\0223\n\006sint64" +
      "\030\010 \001(\0132\031.buf.validate.SInt64RulesH\000R\006sin" +
      "t64\0226\n\007fixed32\030\t \001(\0132\032.buf.validate.Fixe" +
      "d32RulesH\000R\007fixed32\0226\n\007fixed64\030\n \001(\0132\032.b" +
      "uf.validate.Fixed64RulesH\000R\007fixed64\0229\n\010s" +
      "fixed32\030\013 \001(\0132\033.buf.validate.SFixed32Rul" +
      "esH\000R\010sfixed32\0229\n\010sfixed64\030\014 \001(\0132\033.buf.v" +
      "alidate.SFixed64RulesH\000R\010sfixed64\022-\n\004boo" +
      "l\030\r \001(\0132\027.buf.validate.BoolRulesH\000R\004bool" +
      "\0223\n\006string\030\016 \001(\0132\031.buf.validate.StringRu" +
      "lesH\000R\006string\0220\n\005bytes\030\017 \001(\0132\030.buf.valid" +
      "ate.BytesRulesH\000R\005bytes\022-\n\004enum\030\020 \001(\0132\027." +
      "buf.validate.EnumRulesH\000R\004enum\0229\n\010repeat" +
      "ed\030\022 \001(\0132\033.buf.validate.RepeatedRulesH\000R" +
      "\010repeated\022*\n\003map\030\023 \001(\0132\026.buf.validate.Ma" +
      "pRulesH\000R\003map\022*\n\003any\030\024 \001(\0132\026.buf.validat" +
      "e.AnyRulesH\000R\003any\0229\n\010duration\030\025 \001(\0132\033.bu" +
      "f.validate.DurationRulesH\000R\010duration\022<\n\t" +
      "timestamp\030\026 \001(\0132\034.buf.validate.Timestamp" +
      "RulesH\000R\ttimestampB\006\n\004type\"\242\027\n\nFloatRule" +
      "s\022u\n\005const\030\001 \001(\002BZ\302HW\nU\n\013float.const\032Fth" +
      "is != rules.const ? \'value must equal %s" +
      "\'.format([rules.const]) : \'\'H\002R\005const\210\001\001" +
      "\022\243\001\n\002lt\030\002 \001(\002B\220\001\302H\214\001\n\211\001\n\010float.lt\032}!has(" +
      "rules.gte) && !has(rules.gt) && (this.is" +
      "Nan() || this >= rules.lt)? \'value must " +
      "be less than %s\'.format([rules.lt]) : \'\'" +
      "H\000R\002lt\022\264\001\n\003lte\030\003 \001(\002B\237\001\302H\233\001\n\230\001\n\tfloat.lt" +
      "e\032\212\001!has(rules.gte) && !has(rules.gt) &&" +
      " (this.isNan() || this > rules.lte)? \'va" +
      "lue must be less than or equal to %s\'.fo" +
      "rmat([rules.lte]) : \'\'H\000R\003lte\022\363\007\n\002gt\030\004 \001" +
      "(\002B\340\007\302H\334\007\n\215\001\n\010float.gt\032\200\001!has(rules.lt) " +
      "&& !has(rules.lte) && (this.isNan() || t" +
      "his <= rules.gt)? \'value must be greater" +
      " than %s\'.format([rules.gt]) : \'\'\n\303\001\n\013fl" +
      "oat.gt_lt\032\263\001has(rules.lt) && rules.lt >=" +
      " rules.gt && (this.isNan() || this >= ru" +
      "les.lt || this <= rules.gt)? \'value must" +
      " be greater than %s and less than %s\'.fo" +
      "rmat([rules.gt, rules.lt]) : \'\'\n\315\001\n\025floa" +
      "t.gt_lt_exclusive\032\263\001has(rules.lt) && rul" +
      "es.lt < rules.gt && (this.isNan() || (ru" +
      "les.lt <= this && this <= rules.gt))? \'v" +
      "alue must be greater than %s or less tha" +
      "n %s\'.format([rules.gt, rules.lt]) : \'\'\n" +
      "\323\001\n\014float.gt_lte\032\302\001has(rules.lte) && rul" +
      "es.lte >= rules.gt && (this.isNan() || t" +
      "his > rules.lte || this <= rules.gt)? \'v" +
      "alue must be greater than %s and less th" +
      "an or equal to %s\'.format([rules.gt, rul" +
      "es.lte]) : \'\'\n\335\001\n\026float.gt_lte_exclusive" +
      "\032\302\001has(rules.lte) && rules.lte < rules.g" +
      "t && (this.isNan() || (rules.lte < this " +
      "&& this <= rules.gt))? \'value must be gr" +
      "eater than %s or less than or equal to %" +
      "s\'.format([rules.gt, rules.lte]) : \'\'H\001R" +
      "\002gt\022\277\010\n\003gte\030\005 \001(\002B\252\010\302H\246\010\n\233\001\n\tfloat.gte\032\215" +
      "\001!has(rules.lt) && !has(rules.lte) && (t" +
      "his.isNan() || this < rules.gte)? \'value" +
      " must be greater than or equal to %s\'.fo" +
      "rmat([rules.gte]) : \'\'\n\322\001\n\014float.gte_lt\032" +
      "\301\001has(rules.lt) && rules.lt >= rules.gte" +
      " && (this.isNan() || this >= rules.lt ||" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s and less than %s\'" +
      ".format([rules.gte, rules.lt]) : \'\'\n\334\001\n\026" +
      "float.gte_lt_exclusive\032\301\001has(rules.lt) &" +
      "& rules.lt < rules.gte && (this.isNan() " +
      "|| (rules.lt <= this && this < rules.gte" +
      "))? \'value must be greater than or equal" +
      " to %s or less than %s\'.format([rules.gt" +
      "e, rules.lt]) : \'\'\n\342\001\n\rfloat.gte_lte\032\320\001h" +
      "as(rules.lte) && rules.lte >= rules.gte " +
      "&& (this.isNan() || this > rules.lte || " +
      "this < rules.gte)? \'value must be greate" +
      "r than or equal to %s and less than or e" +
      "qual to %s\'.format([rules.gte, rules.lte" +
      "]) : \'\'\n\354\001\n\027float.gte_lte_exclusive\032\320\001ha" +
      "s(rules.lte) && rules.lte < rules.gte &&" +
      " (this.isNan() || (rules.lte < this && t" +
      "his < rules.gte))? \'value must be greate" +
      "r than or equal to %s or less than or eq" +
      "ual to %s\'.format([rules.gte, rules.lte]" +
      ") : \'\'H\001R\003gte\022y\n\002in\030\006 \003(\002Bi\302Hf\nd\n\010float." +
      "in\032X!(this in dyn(rules)[\'in\']) ? \'value" +
      " must be in list %s\'.format([dyn(rules)[" +
      "\'in\']]) : \'\'R\002in\022}\n\006not_in\030\007 \003(\002Bf\302Hc\na\n" +
      "\014float.not_in\032Qthis in rules.not_in ? \'v" +
      "alue must not be in list %s\'.format([rul" +
      "es.not_in]) : \'\'R\005notIn\022g\n\006finite\030\010 \001(\010B" +
      "O\302HL\nJ\n\014float.finite\032:this.isNan() || th" +
      "is.isInf() ? \'value must be finite\' : \'\'" +
      "R\006finiteB\013\n\tless_thanB\016\n\014greater_thanB\010\n" +
      "\006_const\"\263\027\n\013DoubleRules\022v\n\005const\030\001 \001(\001B[" +
      "\302HX\nV\n\014double.const\032Fthis != rules.const" +
      " ? \'value must equal %s\'.format([rules.c" +
      "onst]) : \'\'H\002R\005const\210\001\001\022\244\001\n\002lt\030\002 \001(\001B\221\001\302" +
      "H\215\001\n\212\001\n\tdouble.lt\032}!has(rules.gte) && !h" +
      "as(rules.gt) && (this.isNan() || this >=" +
      " rules.lt)? \'value must be less than %s\'" +
      ".format([rules.lt]) : \'\'H\000R\002lt\022\265\001\n\003lte\030\003" +
      " \001(\001B\240\001\302H\234\001\n\231\001\n\ndouble.lte\032\212\001!has(rules." +
      "gte) && !has(rules.gt) && (this.isNan() " +
      "|| this > rules.lte)? \'value must be les" +
      "s than or equal to %s\'.format([rules.lte" +
      "]) : \'\'H\000R\003lte\022\370\007\n\002gt\030\004 \001(\001B\345\007\302H\341\007\n\216\001\n\td" +
      "ouble.gt\032\200\001!has(rules.lt) && !has(rules." +
      "lte) && (this.isNan() || this <= rules.g" +
      "t)? \'value must be greater than %s\'.form" +
      "at([rules.gt]) : \'\'\n\304\001\n\014double.gt_lt\032\263\001h" +
      "as(rules.lt) && rules.lt >= rules.gt && " +
      "(this.isNan() || this >= rules.lt || thi" +
      "s <= rules.gt)? \'value must be greater t" +
      "han %s and less than %s\'.format([rules.g" +
      "t, rules.lt]) : \'\'\n\316\001\n\026double.gt_lt_excl" +
      "usive\032\263\001has(rules.lt) && rules.lt < rule" +
      "s.gt && (this.isNan() || (rules.lt <= th" +
      "is && this <= rules.gt))? \'value must be" +
      " greater than %s or less than %s\'.format" +
      "([rules.gt, rules.lt]) : \'\'\n\324\001\n\rdouble.g" +
      "t_lte\032\302\001has(rules.lte) && rules.lte >= r" +
      "ules.gt && (this.isNan() || this > rules" +
      ".lte || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than or equal" +
      " to %s\'.format([rules.gt, rules.lte]) : " +
      "\'\'\n\336\001\n\027double.gt_lte_exclusive\032\302\001has(rul" +
      "es.lte) && rules.lte < rules.gt && (this" +
      ".isNan() || (rules.lte < this && this <=" +
      " rules.gt))? \'value must be greater than" +
      " %s or less than or equal to %s\'.format(" +
      "[rules.gt, rules.lte]) : \'\'H\001R\002gt\022\304\010\n\003gt" +
      "e\030\005 \001(\001B\257\010\302H\253\010\n\234\001\n\ndouble.gte\032\215\001!has(rul" +
      "es.lt) && !has(rules.lte) && (this.isNan" +
      "() || this < rules.gte)? \'value must be " +
      "greater than or equal to %s\'.format([rul" +
      "es.gte]) : \'\'\n\323\001\n\rdouble.gte_lt\032\301\001has(ru" +
      "les.lt) && rules.lt >= rules.gte && (thi" +
      "s.isNan() || this >= rules.lt || this < " +
      "rules.gte)? \'value must be greater than " +
      "or equal to %s and less than %s\'.format(" +
      "[rules.gte, rules.lt]) : \'\'\n\335\001\n\027double.g" +
      "te_lt_exclusive\032\301\001has(rules.lt) && rules" +
      ".lt < rules.gte && (this.isNan() || (rul" +
      "es.lt <= this && this < rules.gte))? \'va" +
      "lue must be greater than or equal to %s " +
      "or less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\343\001\n\016double.gte_lte\032\320\001has(rul" +
      "es.lte) && rules.lte >= rules.gte && (th" +
      "is.isNan() || this > rules.lte || this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s and less than or equal t" +
      "o %s\'.format([rules.gte, rules.lte]) : \'" +
      "\'\n\355\001\n\030double.gte_lte_exclusive\032\320\001has(rul" +
      "es.lte) && rules.lte < rules.gte && (thi" +
      "s.isNan() || (rules.lte < this && this <" +
      " rules.gte))? \'value must be greater tha" +
      "n or equal to %s or less than or equal t" +
      "o %s\'.format([rules.gte, rules.lte]) : \'" +
      "\'H\001R\003gte\022z\n\002in\030\006 \003(\001Bj\302Hg\ne\n\tdouble.in\032X" +
      "!(this in dyn(rules)[\'in\']) ? \'value mus" +
      "t be in list %s\'.format([dyn(rules)[\'in\'" +
      "]]) : \'\'R\002in\022~\n\006not_in\030\007 \003(\001Bg\302Hd\nb\n\rdou" +
      "ble.not_in\032Qthis in rules.not_in ? \'valu" +
      "e must not be in list %s\'.format([rules." +
      "not_in]) : \'\'R\005notIn\022h\n\006finite\030\010 \001(\010BP\302H" +
      "M\nK\n\rdouble.finite\032:this.isNan() || this" +
      ".isInf() ? \'value must be finite\' : \'\'R\006" +
      "finiteB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_" +
      "const\"\342\024\n\nInt32Rules\022u\n\005const\030\001 \001(\005BZ\302HW" +
      "\nU\n\013int32.const\032Fthis != rules.const ? \'" +
      "value must equal %s\'.format([rules.const" +
      "]) : \'\'H\002R\005const\210\001\001\022\216\001\n\002lt\030\002 \001(\005B|\302Hy\nw\n" +
      "\010int32.lt\032k!has(rules.gte) && !has(rules" +
      ".gt) && this >= rules.lt? \'value must be" +
      " less than %s\'.format([rules.lt]) : \'\'H\000" +
      "R\002lt\022\241\001\n\003lte\030\003 \001(\005B\214\001\302H\210\001\n\205\001\n\tint32.lte\032" +
      "x!has(rules.gte) && !has(rules.gt) && th" +
      "is > rules.lte? \'value must be less than" +
      " or equal to %s\'.format([rules.lte]) : \'" +
      "\'H\000R\003lte\022\233\007\n\002gt\030\004 \001(\005B\210\007\302H\204\007\nz\n\010int32.gt" +
      "\032n!has(rules.lt) && !has(rules.lte) && t" +
      "his <= rules.gt? \'value must be greater " +
      "than %s\'.format([rules.gt]) : \'\'\n\263\001\n\013int" +
      "32.gt_lt\032\243\001has(rules.lt) && rules.lt >= " +
      "rules.gt && (this >= rules.lt || this <=" +
      " rules.gt)? \'value must be greater than " +
      "%s and less than %s\'.format([rules.gt, r" +
      "ules.lt]) : \'\'\n\273\001\n\025int32.gt_lt_exclusive" +
      "\032\241\001has(rules.lt) && rules.lt < rules.gt " +
      "&& (rules.lt <= this && this <= rules.gt" +
      ")? \'value must be greater than %s or les" +
      "s than %s\'.format([rules.gt, rules.lt]) " +
      ": \'\'\n\303\001\n\014int32.gt_lte\032\262\001has(rules.lte) &" +
      "& rules.lte >= rules.gt && (this > rules" +
      ".lte || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than or equal" +
      " to %s\'.format([rules.gt, rules.lte]) : " +
      "\'\'\n\313\001\n\026int32.gt_lte_exclusive\032\260\001has(rule" +
      "s.lte) && rules.lte < rules.gt && (rules" +
      ".lte < this && this <= rules.gt)? \'value" +
      " must be greater than %s or less than or" +
      " equal to %s\'.format([rules.gt, rules.lt" +
      "e]) : \'\'H\001R\002gt\022\350\007\n\003gte\030\005 \001(\005B\323\007\302H\317\007\n\210\001\n\t" +
      "int32.gte\032{!has(rules.lt) && !has(rules." +
      "lte) && this < rules.gte? \'value must be" +
      " greater than or equal to %s\'.format([ru" +
      "les.gte]) : \'\'\n\302\001\n\014int32.gte_lt\032\261\001has(ru" +
      "les.lt) && rules.lt >= rules.gte && (thi" +
      "s >= rules.lt || this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s a" +
      "nd less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\312\001\n\026int32.gte_lt_exclusive\032\257" +
      "\001has(rules.lt) && rules.lt < rules.gte &" +
      "& (rules.lt <= this && this < rules.gte)" +
      "? \'value must be greater than or equal t" +
      "o %s or less than %s\'.format([rules.gte," +
      " rules.lt]) : \'\'\n\322\001\n\rint32.gte_lte\032\300\001has" +
      "(rules.lte) && rules.lte >= rules.gte &&" +
      " (this > rules.lte || this < rules.gte)?" +
      " \'value must be greater than or equal to" +
      " %s and less than or equal to %s\'.format" +
      "([rules.gte, rules.lte]) : \'\'\n\332\001\n\027int32." +
      "gte_lte_exclusive\032\276\001has(rules.lte) && ru" +
      "les.lte < rules.gte && (rules.lte < this" +
      " && this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s or less than o" +
      "r equal to %s\'.format([rules.gte, rules." +
      "lte]) : \'\'H\001R\003gte\022y\n\002in\030\006 \003(\005Bi\302Hf\nd\n\010in" +
      "t32.in\032X!(this in dyn(rules)[\'in\']) ? \'v" +
      "alue must be in list %s\'.format([dyn(rul" +
      "es)[\'in\']]) : \'\'R\002in\022}\n\006not_in\030\007 \003(\005Bf\302H" +
      "c\na\n\014int32.not_in\032Qthis in rules.not_in " +
      "? \'value must not be in list %s\'.format(" +
      "[rules.not_in]) : \'\'R\005notInB\013\n\tless_than" +
      "B\016\n\014greater_thanB\010\n\006_const\"\342\024\n\nInt64Rule" +
      "s\022u\n\005const\030\001 \001(\003BZ\302HW\nU\n\013int64.const\032Fth" +
      "is != rules.const ? \'value must equal %s" +
      "\'.format([rules.const]) : \'\'H\002R\005const\210\001\001" +
      "\022\216\001\n\002lt\030\002 \001(\003B|\302Hy\nw\n\010int64.lt\032k!has(rul" +
      "es.gte) && !has(rules.gt) && this >= rul" +
      "es.lt? \'value must be less than %s\'.form" +
      "at([rules.lt]) : \'\'H\000R\002lt\022\241\001\n\003lte\030\003 \001(\003B" +
      "\214\001\302H\210\001\n\205\001\n\tint64.lte\032x!has(rules.gte) &&" +
      " !has(rules.gt) && this > rules.lte? \'va" +
      "lue must be less than or equal to %s\'.fo" +
      "rmat([rules.lte]) : \'\'H\000R\003lte\022\233\007\n\002gt\030\004 \001" +
      "(\003B\210\007\302H\204\007\nz\n\010int64.gt\032n!has(rules.lt) &&" +
      " !has(rules.lte) && this <= rules.gt? \'v" +
      "alue must be greater than %s\'.format([ru" +
      "les.gt]) : \'\'\n\263\001\n\013int64.gt_lt\032\243\001has(rule" +
      "s.lt) && rules.lt >= rules.gt && (this >" +
      "= rules.lt || this <= rules.gt)? \'value " +
      "must be greater than %s and less than %s" +
      "\'.format([rules.gt, rules.lt]) : \'\'\n\273\001\n\025" +
      "int64.gt_lt_exclusive\032\241\001has(rules.lt) &&" +
      " rules.lt < rules.gt && (rules.lt <= thi" +
      "s && this <= rules.gt)? \'value must be g" +
      "reater than %s or less than %s\'.format([" +
      "rules.gt, rules.lt]) : \'\'\n\303\001\n\014int64.gt_l" +
      "te\032\262\001has(rules.lte) && rules.lte >= rule" +
      "s.gt && (this > rules.lte || this <= rul" +
      "es.gt)? \'value must be greater than %s a" +
      "nd less than or equal to %s\'.format([rul" +
      "es.gt, rules.lte]) : \'\'\n\313\001\n\026int64.gt_lte" +
      "_exclusive\032\260\001has(rules.lte) && rules.lte" +
      " < rules.gt && (rules.lte < this && this" +
      " <= rules.gt)? \'value must be greater th" +
      "an %s or less than or equal to %s\'.forma" +
      "t([rules.gt, rules.lte]) : \'\'H\001R\002gt\022\350\007\n\003" +
      "gte\030\005 \001(\003B\323\007\302H\317\007\n\210\001\n\tint64.gte\032{!has(rul" +
      "es.lt) && !has(rules.lte) && this < rule" +
      "s.gte? \'value must be greater than or eq" +
      "ual to %s\'.format([rules.gte]) : \'\'\n\302\001\n\014" +
      "int64.gte_lt\032\261\001has(rules.lt) && rules.lt" +
      " >= rules.gte && (this >= rules.lt || th" +
      "is < rules.gte)? \'value must be greater " +
      "than or equal to %s and less than %s\'.fo" +
      "rmat([rules.gte, rules.lt]) : \'\'\n\312\001\n\026int" +
      "64.gte_lt_exclusive\032\257\001has(rules.lt) && r" +
      "ules.lt < rules.gte && (rules.lt <= this" +
      " && this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s or less than %" +
      "s\'.format([rules.gte, rules.lt]) : \'\'\n\322\001" +
      "\n\rint64.gte_lte\032\300\001has(rules.lte) && rule" +
      "s.lte >= rules.gte && (this > rules.lte " +
      "|| this < rules.gte)? \'value must be gre" +
      "ater than or equal to %s and less than o" +
      "r equal to %s\'.format([rules.gte, rules." +
      "lte]) : \'\'\n\332\001\n\027int64.gte_lte_exclusive\032\276" +
      "\001has(rules.lte) && rules.lte < rules.gte" +
      " && (rules.lte < this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'H\001R\003gte\022y" +
      "\n\002in\030\006 \003(\003Bi\302Hf\nd\n\010int64.in\032X!(this in d" +
      "yn(rules)[\'in\']) ? \'value must be in lis" +
      "t %s\'.format([dyn(rules)[\'in\']]) : \'\'R\002i" +
      "n\022}\n\006not_in\030\007 \003(\003Bf\302Hc\na\n\014int64.not_in\032Q" +
      "this in rules.not_in ? \'value must not b" +
      "e in list %s\'.format([rules.not_in]) : \'" +
      "\'R\005notInB\013\n\tless_thanB\016\n\014greater_thanB\010\n" +
      "\006_const\"\362\024\n\013UInt32Rules\022v\n\005const\030\001 \001(\rB[" +
      "\302HX\nV\n\014uint32.const\032Fthis != rules.const" +
      " ? \'value must equal %s\'.format([rules.c" +
      "onst]) : \'\'H\002R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\rB}\302H" +
      "z\nx\n\tuint32.lt\032k!has(rules.gte) && !has(" +
      "rules.gt) && this >= rules.lt? \'value mu" +
      "st be less than %s\'.format([rules.lt]) :" +
      " \'\'H\000R\002lt\022\242\001\n\003lte\030\003 \001(\rB\215\001\302H\211\001\n\206\001\n\nuint3" +
      "2.lte\032x!has(rules.gte) && !has(rules.gt)" +
      " && this > rules.lte? \'value must be les" +
      "s than or equal to %s\'.format([rules.lte" +
      "]) : \'\'H\000R\003lte\022\240\007\n\002gt\030\004 \001(\rB\215\007\302H\211\007\n{\n\tui" +
      "nt32.gt\032n!has(rules.lt) && !has(rules.lt" +
      "e) && this <= rules.gt? \'value must be g" +
      "reater than %s\'.format([rules.gt]) : \'\'\n" +
      "\264\001\n\014uint32.gt_lt\032\243\001has(rules.lt) && rule" +
      "s.lt >= rules.gt && (this >= rules.lt ||" +
      " this <= rules.gt)? \'value must be great" +
      "er than %s and less than %s\'.format([rul" +
      "es.gt, rules.lt]) : \'\'\n\274\001\n\026uint32.gt_lt_" +
      "exclusive\032\241\001has(rules.lt) && rules.lt < " +
      "rules.gt && (rules.lt <= this && this <=" +
      " rules.gt)? \'value must be greater than " +
      "%s or less than %s\'.format([rules.gt, ru" +
      "les.lt]) : \'\'\n\304\001\n\ruint32.gt_lte\032\262\001has(ru" +
      "les.lte) && rules.lte >= rules.gt && (th" +
      "is > rules.lte || this <= rules.gt)? \'va" +
      "lue must be greater than %s and less tha" +
      "n or equal to %s\'.format([rules.gt, rule" +
      "s.lte]) : \'\'\n\314\001\n\027uint32.gt_lte_exclusive" +
      "\032\260\001has(rules.lte) && rules.lte < rules.g" +
      "t && (rules.lte < this && this <= rules." +
      "gt)? \'value must be greater than %s or l" +
      "ess than or equal to %s\'.format([rules.g" +
      "t, rules.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\rB" +
      "\330\007\302H\324\007\n\211\001\n\nuint32.gte\032{!has(rules.lt) &&" +
      " !has(rules.lte) && this < rules.gte? \'v" +
      "alue must be greater than or equal to %s" +
      "\'.format([rules.gte]) : \'\'\n\303\001\n\ruint32.gt" +
      "e_lt\032\261\001has(rules.lt) && rules.lt >= rule" +
      "s.gte && (this >= rules.lt || this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s and less than %s\'.format([ru" +
      "les.gte, rules.lt]) : \'\'\n\313\001\n\027uint32.gte_" +
      "lt_exclusive\032\257\001has(rules.lt) && rules.lt" +
      " < rules.gte && (rules.lt <= this && thi" +
      "s < rules.gte)? \'value must be greater t" +
      "han or equal to %s or less than %s\'.form" +
      "at([rules.gte, rules.lt]) : \'\'\n\323\001\n\016uint3" +
      "2.gte_lte\032\300\001has(rules.lte) && rules.lte " +
      ">= rules.gte && (this > rules.lte || thi" +
      "s < rules.gte)? \'value must be greater t" +
      "han or equal to %s and less than or equa" +
      "l to %s\'.format([rules.gte, rules.lte]) " +
      ": \'\'\n\333\001\n\030uint32.gte_lte_exclusive\032\276\001has(" +
      "rules.lte) && rules.lte < rules.gte && (" +
      "rules.lte < this && this < rules.gte)? \'" +
      "value must be greater than or equal to %" +
      "s or less than or equal to %s\'.format([r" +
      "ules.gte, rules.lte]) : \'\'H\001R\003gte\022z\n\002in\030" +
      "\006 \003(\rBj\302Hg\ne\n\tuint32.in\032X!(this in dyn(r" +
      "ules)[\'in\']) ? \'value must be in list %s" +
      "\'.format([dyn(rules)[\'in\']]) : \'\'R\002in\022~\n" +
      "\006not_in\030\007 \003(\rBg\302Hd\nb\n\ruint32.not_in\032Qthi" +
      "s in rules.not_in ? \'value must not be i" +
      "n list %s\'.format([rules.not_in]) : \'\'R\005" +
      "notInB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_c" +
      "onst\"\362\024\n\013UInt64Rules\022v\n\005const\030\001 \001(\004B[\302HX" +
      "\nV\n\014uint64.const\032Fthis != rules.const ? " +
      "\'value must equal %s\'.format([rules.cons" +
      "t]) : \'\'H\002R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\004B}\302Hz\nx" +
      "\n\tuint64.lt\032k!has(rules.gte) && !has(rul" +
      "es.gt) && this >= rules.lt? \'value must " +
      "be less than %s\'.format([rules.lt]) : \'\'" +
      "H\000R\002lt\022\242\001\n\003lte\030\003 \001(\004B\215\001\302H\211\001\n\206\001\n\nuint64.l",
      "te\032x!has(rules.gte) && !has(rules.gt) &&" +
      " this > rules.lte? \'value must be less t" +
      "han or equal to %s\'.format([rules.lte]) " +
      ": \'\'H\000R\003lte\022\240\007\n\002gt\030\004 \001(\004B\215\007\302H\211\007\n{\n\tuint6" +
      "4.gt\032n!has(rules.lt) && !has(rules.lte) " +
      "&& this <= rules.gt? \'value must be grea" +
      "ter than %s\'.format([rules.gt]) : \'\'\n\264\001\n" +
      "\014uint64.gt_lt\032\243\001has(rules.lt) && rules.l" +
      "t >= rules.gt && (this >= rules.lt || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than %s\'.format([rules." +
      "gt, rules.lt]) : \'\'\n\274\001\n\026uint64.gt_lt_exc" +
      "lusive\032\241\001has(rules.lt) && rules.lt < rul" +
      "es.gt && (rules.lt <= this && this <= ru" +
      "les.gt)? \'value must be greater than %s " +
      "or less than %s\'.format([rules.gt, rules" +
      ".lt]) : \'\'\n\304\001\n\ruint64.gt_lte\032\262\001has(rules" +
      ".lte) && rules.lte >= rules.gt && (this " +
      "> rules.lte || this <= rules.gt)? \'value" +
      " must be greater than %s and less than o" +
      "r equal to %s\'.format([rules.gt, rules.l" +
      "te]) : \'\'\n\314\001\n\027uint64.gt_lte_exclusive\032\260\001" +
      "has(rules.lte) && rules.lte < rules.gt &" +
      "& (rules.lte < this && this <= rules.gt)" +
      "? \'value must be greater than %s or less" +
      " than or equal to %s\'.format([rules.gt, " +
      "rules.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\004B\330\007\302" +
      "H\324\007\n\211\001\n\nuint64.gte\032{!has(rules.lt) && !h" +
      "as(rules.lte) && this < rules.gte? \'valu" +
      "e must be greater than or equal to %s\'.f" +
      "ormat([rules.gte]) : \'\'\n\303\001\n\ruint64.gte_l" +
      "t\032\261\001has(rules.lt) && rules.lt >= rules.g" +
      "te && (this >= rules.lt || this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s and less than %s\'.format([rules" +
      ".gte, rules.lt]) : \'\'\n\313\001\n\027uint64.gte_lt_" +
      "exclusive\032\257\001has(rules.lt) && rules.lt < " +
      "rules.gte && (rules.lt <= this && this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s or less than %s\'.format(" +
      "[rules.gte, rules.lt]) : \'\'\n\323\001\n\016uint64.g" +
      "te_lte\032\300\001has(rules.lte) && rules.lte >= " +
      "rules.gte && (this > rules.lte || this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s and less than or equal t" +
      "o %s\'.format([rules.gte, rules.lte]) : \'" +
      "\'\n\333\001\n\030uint64.gte_lte_exclusive\032\276\001has(rul" +
      "es.lte) && rules.lte < rules.gte && (rul" +
      "es.lte < this && this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s o" +
      "r less than or equal to %s\'.format([rule" +
      "s.gte, rules.lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003" +
      "(\004Bj\302Hg\ne\n\tuint64.in\032X!(this in dyn(rule" +
      "s)[\'in\']) ? \'value must be in list %s\'.f" +
      "ormat([dyn(rules)[\'in\']]) : \'\'R\002in\022~\n\006no" +
      "t_in\030\007 \003(\004Bg\302Hd\nb\n\ruint64.not_in\032Qthis i" +
      "n rules.not_in ? \'value must not be in l" +
      "ist %s\'.format([rules.not_in]) : \'\'R\005not" +
      "InB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_cons" +
      "t\"\362\024\n\013SInt32Rules\022v\n\005const\030\001 \001(\021B[\302HX\nV\n" +
      "\014sint32.const\032Fthis != rules.const ? \'va" +
      "lue must equal %s\'.format([rules.const])" +
      " : \'\'H\002R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\021B}\302Hz\nx\n\ts" +
      "int32.lt\032k!has(rules.gte) && !has(rules." +
      "gt) && this >= rules.lt? \'value must be " +
      "less than %s\'.format([rules.lt]) : \'\'H\000R" +
      "\002lt\022\242\001\n\003lte\030\003 \001(\021B\215\001\302H\211\001\n\206\001\n\nsint32.lte\032" +
      "x!has(rules.gte) && !has(rules.gt) && th" +
      "is > rules.lte? \'value must be less than" +
      " or equal to %s\'.format([rules.lte]) : \'" +
      "\'H\000R\003lte\022\240\007\n\002gt\030\004 \001(\021B\215\007\302H\211\007\n{\n\tsint32.g" +
      "t\032n!has(rules.lt) && !has(rules.lte) && " +
      "this <= rules.gt? \'value must be greater" +
      " than %s\'.format([rules.gt]) : \'\'\n\264\001\n\014si" +
      "nt32.gt_lt\032\243\001has(rules.lt) && rules.lt >" +
      "= rules.gt && (this >= rules.lt || this " +
      "<= rules.gt)? \'value must be greater tha" +
      "n %s and less than %s\'.format([rules.gt," +
      " rules.lt]) : \'\'\n\274\001\n\026sint32.gt_lt_exclus" +
      "ive\032\241\001has(rules.lt) && rules.lt < rules." +
      "gt && (rules.lt <= this && this <= rules" +
      ".gt)? \'value must be greater than %s or " +
      "less than %s\'.format([rules.gt, rules.lt" +
      "]) : \'\'\n\304\001\n\rsint32.gt_lte\032\262\001has(rules.lt" +
      "e) && rules.lte >= rules.gt && (this > r" +
      "ules.lte || this <= rules.gt)? \'value mu" +
      "st be greater than %s and less than or e" +
      "qual to %s\'.format([rules.gt, rules.lte]" +
      ") : \'\'\n\314\001\n\027sint32.gt_lte_exclusive\032\260\001has" +
      "(rules.lte) && rules.lte < rules.gt && (" +
      "rules.lte < this && this <= rules.gt)? \'" +
      "value must be greater than %s or less th" +
      "an or equal to %s\'.format([rules.gt, rul" +
      "es.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\021B\330\007\302H\324\007" +
      "\n\211\001\n\nsint32.gte\032{!has(rules.lt) && !has(" +
      "rules.lte) && this < rules.gte? \'value m" +
      "ust be greater than or equal to %s\'.form" +
      "at([rules.gte]) : \'\'\n\303\001\n\rsint32.gte_lt\032\261" +
      "\001has(rules.lt) && rules.lt >= rules.gte " +
      "&& (this >= rules.lt || this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s and less than %s\'.format([rules.gt" +
      "e, rules.lt]) : \'\'\n\313\001\n\027sint32.gte_lt_exc" +
      "lusive\032\257\001has(rules.lt) && rules.lt < rul" +
      "es.gte && (rules.lt <= this && this < ru" +
      "les.gte)? \'value must be greater than or" +
      " equal to %s or less than %s\'.format([ru" +
      "les.gte, rules.lt]) : \'\'\n\323\001\n\016sint32.gte_" +
      "lte\032\300\001has(rules.lte) && rules.lte >= rul" +
      "es.gte && (this > rules.lte || this < ru" +
      "les.gte)? \'value must be greater than or" +
      " equal to %s and less than or equal to %" +
      "s\'.format([rules.gte, rules.lte]) : \'\'\n\333" +
      "\001\n\030sint32.gte_lte_exclusive\032\276\001has(rules." +
      "lte) && rules.lte < rules.gte && (rules." +
      "lte < this && this < rules.gte)? \'value " +
      "must be greater than or equal to %s or l" +
      "ess than or equal to %s\'.format([rules.g" +
      "te, rules.lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\021B" +
      "j\302Hg\ne\n\tsint32.in\032X!(this in dyn(rules)[" +
      "\'in\']) ? \'value must be in list %s\'.form" +
      "at([dyn(rules)[\'in\']]) : \'\'R\002in\022~\n\006not_i" +
      "n\030\007 \003(\021Bg\302Hd\nb\n\rsint32.not_in\032Qthis in r" +
      "ules.not_in ? \'value must not be in list" +
      " %s\'.format([rules.not_in]) : \'\'R\005notInB" +
      "\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_const\"\362" +
      "\024\n\013SInt64Rules\022v\n\005const\030\001 \001(\022B[\302HX\nV\n\014si" +
      "nt64.const\032Fthis != rules.const ? \'value" +
      " must equal %s\'.format([rules.const]) : " +
      "\'\'H\002R\005const\210\001\001\022\217\001\n\002lt\030\002 \001(\022B}\302Hz\nx\n\tsint" +
      "64.lt\032k!has(rules.gte) && !has(rules.gt)" +
      " && this >= rules.lt? \'value must be les" +
      "s than %s\'.format([rules.lt]) : \'\'H\000R\002lt" +
      "\022\242\001\n\003lte\030\003 \001(\022B\215\001\302H\211\001\n\206\001\n\nsint64.lte\032x!h" +
      "as(rules.gte) && !has(rules.gt) && this " +
      "> rules.lte? \'value must be less than or" +
      " equal to %s\'.format([rules.lte]) : \'\'H\000" +
      "R\003lte\022\240\007\n\002gt\030\004 \001(\022B\215\007\302H\211\007\n{\n\tsint64.gt\032n" +
      "!has(rules.lt) && !has(rules.lte) && thi" +
      "s <= rules.gt? \'value must be greater th" +
      "an %s\'.format([rules.gt]) : \'\'\n\264\001\n\014sint6" +
      "4.gt_lt\032\243\001has(rules.lt) && rules.lt >= r" +
      "ules.gt && (this >= rules.lt || this <= " +
      "rules.gt)? \'value must be greater than %" +
      "s and less than %s\'.format([rules.gt, ru" +
      "les.lt]) : \'\'\n\274\001\n\026sint64.gt_lt_exclusive" +
      "\032\241\001has(rules.lt) && rules.lt < rules.gt " +
      "&& (rules.lt <= this && this <= rules.gt" +
      ")? \'value must be greater than %s or les" +
      "s than %s\'.format([rules.gt, rules.lt]) " +
      ": \'\'\n\304\001\n\rsint64.gt_lte\032\262\001has(rules.lte) " +
      "&& rules.lte >= rules.gt && (this > rule" +
      "s.lte || this <= rules.gt)? \'value must " +
      "be greater than %s and less than or equa" +
      "l to %s\'.format([rules.gt, rules.lte]) :" +
      " \'\'\n\314\001\n\027sint64.gt_lte_exclusive\032\260\001has(ru" +
      "les.lte) && rules.lte < rules.gt && (rul" +
      "es.lte < this && this <= rules.gt)? \'val" +
      "ue must be greater than %s or less than " +
      "or equal to %s\'.format([rules.gt, rules." +
      "lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\022B\330\007\302H\324\007\n\211\001" +
      "\n\nsint64.gte\032{!has(rules.lt) && !has(rul" +
      "es.lte) && this < rules.gte? \'value must" +
      " be greater than or equal to %s\'.format(" +
      "[rules.gte]) : \'\'\n\303\001\n\rsint64.gte_lt\032\261\001ha" +
      "s(rules.lt) && rules.lt >= rules.gte && " +
      "(this >= rules.lt || this < rules.gte)? " +
      "\'value must be greater than or equal to " +
      "%s and less than %s\'.format([rules.gte, " +
      "rules.lt]) : \'\'\n\313\001\n\027sint64.gte_lt_exclus" +
      "ive\032\257\001has(rules.lt) && rules.lt < rules." +
      "gte && (rules.lt <= this && this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s or less than %s\'.format([rules" +
      ".gte, rules.lt]) : \'\'\n\323\001\n\016sint64.gte_lte" +
      "\032\300\001has(rules.lte) && rules.lte >= rules." +
      "gte && (this > rules.lte || this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s and less than or equal to %s\'." +
      "format([rules.gte, rules.lte]) : \'\'\n\333\001\n\030" +
      "sint64.gte_lte_exclusive\032\276\001has(rules.lte" +
      ") && rules.lte < rules.gte && (rules.lte" +
      " < this && this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s or less" +
      " than or equal to %s\'.format([rules.gte," +
      " rules.lte]) : \'\'H\001R\003gte\022z\n\002in\030\006 \003(\022Bj\302H" +
      "g\ne\n\tsint64.in\032X!(this in dyn(rules)[\'in" +
      "\']) ? \'value must be in list %s\'.format(" +
      "[dyn(rules)[\'in\']]) : \'\'R\002in\022~\n\006not_in\030\007" +
      " \003(\022Bg\302Hd\nb\n\rsint64.not_in\032Qthis in rule" +
      "s.not_in ? \'value must not be in list %s" +
      "\'.format([rules.not_in]) : \'\'R\005notInB\013\n\t" +
      "less_thanB\016\n\014greater_thanB\010\n\006_const\"\202\025\n\014" +
      "Fixed32Rules\022w\n\005const\030\001 \001(\007B\\\302HY\nW\n\rfixe" +
      "d32.const\032Fthis != rules.const ? \'value " +
      "must equal %s\'.format([rules.const]) : \'" +
      "\'H\002R\005const\210\001\001\022\220\001\n\002lt\030\002 \001(\007B~\302H{\ny\n\nfixed" +
      "32.lt\032k!has(rules.gte) && !has(rules.gt)" +
      " && this >= rules.lt? \'value must be les" +
      "s than %s\'.format([rules.lt]) : \'\'H\000R\002lt" +
      "\022\243\001\n\003lte\030\003 \001(\007B\216\001\302H\212\001\n\207\001\n\013fixed32.lte\032x!" +
      "has(rules.gte) && !has(rules.gt) && this" +
      " > rules.lte? \'value must be less than o" +
      "r equal to %s\'.format([rules.lte]) : \'\'H" +
      "\000R\003lte\022\245\007\n\002gt\030\004 \001(\007B\222\007\302H\216\007\n|\n\nfixed32.gt" +
      "\032n!has(rules.lt) && !has(rules.lte) && t" +
      "his <= rules.gt? \'value must be greater " +
      "than %s\'.format([rules.gt]) : \'\'\n\265\001\n\rfix" +
      "ed32.gt_lt\032\243\001has(rules.lt) && rules.lt >" +
      "= rules.gt && (this >= rules.lt || this " +
      "<= rules.gt)? \'value must be greater tha" +
      "n %s and less than %s\'.format([rules.gt," +
      " rules.lt]) : \'\'\n\275\001\n\027fixed32.gt_lt_exclu" +
      "sive\032\241\001has(rules.lt) && rules.lt < rules" +
      ".gt && (rules.lt <= this && this <= rule" +
      "s.gt)? \'value must be greater than %s or" +
      " less than %s\'.format([rules.gt, rules.l" +
      "t]) : \'\'\n\305\001\n\016fixed32.gt_lte\032\262\001has(rules." +
      "lte) && rules.lte >= rules.gt && (this >" +
      " rules.lte || this <= rules.gt)? \'value " +
      "must be greater than %s and less than or" +
      " equal to %s\'.format([rules.gt, rules.lt" +
      "e]) : \'\'\n\315\001\n\030fixed32.gt_lte_exclusive\032\260\001" +
      "has(rules.lte) && rules.lte < rules.gt &" +
      "& (rules.lte < this && this <= rules.gt)" +
      "? \'value must be greater than %s or less" +
      " than or equal to %s\'.format([rules.gt, " +
      "rules.lte]) : \'\'H\001R\002gt\022\362\007\n\003gte\030\005 \001(\007B\335\007\302" +
      "H\331\007\n\212\001\n\013fixed32.gte\032{!has(rules.lt) && !" +
      "has(rules.lte) && this < rules.gte? \'val" +
      "ue must be greater than or equal to %s\'." +
      "format([rules.gte]) : \'\'\n\304\001\n\016fixed32.gte" +
      "_lt\032\261\001has(rules.lt) && rules.lt >= rules" +
      ".gte && (this >= rules.lt || this < rule" +
      "s.gte)? \'value must be greater than or e" +
      "qual to %s and less than %s\'.format([rul" +
      "es.gte, rules.lt]) : \'\'\n\314\001\n\030fixed32.gte_" +
      "lt_exclusive\032\257\001has(rules.lt) && rules.lt" +
      " < rules.gte && (rules.lt <= this && thi" +
      "s < rules.gte)? \'value must be greater t" +
      "han or equal to %s or less than %s\'.form" +
      "at([rules.gte, rules.lt]) : \'\'\n\324\001\n\017fixed" +
      "32.gte_lte\032\300\001has(rules.lte) && rules.lte" +
      " >= rules.gte && (this > rules.lte || th" +
      "is < rules.gte)? \'value must be greater " +
      "than or equal to %s and less than or equ" +
      "al to %s\'.format([rules.gte, rules.lte])" +
      " : \'\'\n\334\001\n\031fixed32.gte_lte_exclusive\032\276\001ha" +
      "s(rules.lte) && rules.lte < rules.gte &&" +
      " (rules.lte < this && this < rules.gte)?" +
      " \'value must be greater than or equal to" +
      " %s or less than or equal to %s\'.format(" +
      "[rules.gte, rules.lte]) : \'\'H\001R\003gte\022{\n\002i" +
      "n\030\006 \003(\007Bk\302Hh\nf\n\nfixed32.in\032X!(this in dy" +
      "n(rules)[\'in\']) ? \'value must be in list" +
      " %s\'.format([dyn(rules)[\'in\']]) : \'\'R\002in" +
      "\022\177\n\006not_in\030\007 \003(\007Bh\302He\nc\n\016fixed32.not_in\032" +
      "Qthis in rules.not_in ? \'value must not " +
      "be in list %s\'.format([rules.not_in]) : " +
      "\'\'R\005notInB\013\n\tless_thanB\016\n\014greater_thanB\010" +
      "\n\006_const\"\202\025\n\014Fixed64Rules\022w\n\005const\030\001 \001(\006" +
      "B\\\302HY\nW\n\rfixed64.const\032Fthis != rules.co" +
      "nst ? \'value must equal %s\'.format([rule" +
      "s.const]) : \'\'H\002R\005const\210\001\001\022\220\001\n\002lt\030\002 \001(\006B" +
      "~\302H{\ny\n\nfixed64.lt\032k!has(rules.gte) && !" +
      "has(rules.gt) && this >= rules.lt? \'valu" +
      "e must be less than %s\'.format([rules.lt" +
      "]) : \'\'H\000R\002lt\022\243\001\n\003lte\030\003 \001(\006B\216\001\302H\212\001\n\207\001\n\013f" +
      "ixed64.lte\032x!has(rules.gte) && !has(rule" +
      "s.gt) && this > rules.lte? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\245\007\n\002gt\030\004 \001(\006B\222\007\302H\216\007\n" +
      "|\n\nfixed64.gt\032n!has(rules.lt) && !has(ru" +
      "les.lte) && this <= rules.gt? \'value mus" +
      "t be greater than %s\'.format([rules.gt])" +
      " : \'\'\n\265\001\n\rfixed64.gt_lt\032\243\001has(rules.lt) " +
      "&& rules.lt >= rules.gt && (this >= rule" +
      "s.lt || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than %s\'.form" +
      "at([rules.gt, rules.lt]) : \'\'\n\275\001\n\027fixed6" +
      "4.gt_lt_exclusive\032\241\001has(rules.lt) && rul" +
      "es.lt < rules.gt && (rules.lt <= this &&" +
      " this <= rules.gt)? \'value must be great" +
      "er than %s or less than %s\'.format([rule" +
      "s.gt, rules.lt]) : \'\'\n\305\001\n\016fixed64.gt_lte" +
      "\032\262\001has(rules.lte) && rules.lte >= rules." +
      "gt && (this > rules.lte || this <= rules" +
      ".gt)? \'value must be greater than %s and" +
      " less than or equal to %s\'.format([rules" +
      ".gt, rules.lte]) : \'\'\n\315\001\n\030fixed64.gt_lte" +
      "_exclusive\032\260\001has(rules.lte) && rules.lte" +
      " < rules.gt && (rules.lte < this && this" +
      " <= rules.gt)? \'value must be greater th" +
      "an %s or less than or equal to %s\'.forma" +
      "t([rules.gt, rules.lte]) : \'\'H\001R\002gt\022\362\007\n\003" +
      "gte\030\005 \001(\006B\335\007\302H\331\007\n\212\001\n\013fixed64.gte\032{!has(r" +
      "ules.lt) && !has(rules.lte) && this < ru" +
      "les.gte? \'value must be greater than or " +
      "equal to %s\'.format([rules.gte]) : \'\'\n\304\001" +
      "\n\016fixed64.gte_lt\032\261\001has(rules.lt) && rule" +
      "s.lt >= rules.gte && (this >= rules.lt |" +
      "| this < rules.gte)? \'value must be grea" +
      "ter than or equal to %s and less than %s" +
      "\'.format([rules.gte, rules.lt]) : \'\'\n\314\001\n" +
      "\030fixed64.gte_lt_exclusive\032\257\001has(rules.lt" +
      ") && rules.lt < rules.gte && (rules.lt <" +
      "= this && this < rules.gte)? \'value must" +
      " be greater than or equal to %s or less " +
      "than %s\'.format([rules.gte, rules.lt]) :" +
      " \'\'\n\324\001\n\017fixed64.gte_lte\032\300\001has(rules.lte)" +
      " && rules.lte >= rules.gte && (this > ru" +
      "les.lte || this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s and les" +
      "s than or equal to %s\'.format([rules.gte" +
      ", rules.lte]) : \'\'\n\334\001\n\031fixed64.gte_lte_e" +
      "xclusive\032\276\001has(rules.lte) && rules.lte <" +
      " rules.gte && (rules.lte < this && this " +
      "< rules.gte)? \'value must be greater tha" +
      "n or equal to %s or less than or equal t" +
      "o %s\'.format([rules.gte, rules.lte]) : \'" +
      "\'H\001R\003gte\022{\n\002in\030\006 \003(\006Bk\302Hh\nf\n\nfixed64.in\032" +
      "X!(this in dyn(rules)[\'in\']) ? \'value mu" +
      "st be in list %s\'.format([dyn(rules)[\'in" +
      "\']]) : \'\'R\002in\022\177\n\006not_in\030\007 \003(\006Bh\302He\nc\n\016fi" +
      "xed64.not_in\032Qthis in rules.not_in ? \'va" +
      "lue must not be in list %s\'.format([rule" +
      "s.not_in]) : \'\'R\005notInB\013\n\tless_thanB\016\n\014g" +
      "reater_thanB\010\n\006_const\"\223\025\n\rSFixed32Rules\022" +
      "x\n\005const\030\001 \001(\017B]\302HZ\nX\n\016sfixed32.const\032Ft" +
      "his != rules.const ? \'value must equal %" +
      "s\'.format([rules.const]) : \'\'H\002R\005const\210\001" +
      "\001\022\221\001\n\002lt\030\002 \001(\017B\177\302H|\nz\n\013sfixed32.lt\032k!has" +
      "(rules.gte) && !has(rules.gt) && this >=" +
      " rules.lt? \'value must be less than %s\'." +
      "format([rules.lt]) : \'\'H\000R\002lt\022\244\001\n\003lte\030\003 " +
      "\001(\017B\217\001\302H\213\001\n\210\001\n\014sfixed32.lte\032x!has(rules." +
      "gte) && !has(rules.gt) && this > rules.l" +
      "te? \'value must be less than or equal to" +
      " %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\252\007\n" +
      "\002gt\030\004 \001(\017B\227\007\302H\223\007\n}\n\013sfixed32.gt\032n!has(ru" +
      "les.lt) && !has(rules.lte) && this <= ru" +
      "les.gt? \'value must be greater than %s\'." +
      "format([rules.gt]) : \'\'\n\266\001\n\016sfixed32.gt_" +
      "lt\032\243\001has(rules.lt) && rules.lt >= rules." +
      "gt && (this >= rules.lt || this <= rules" +
      ".gt)? \'value must be greater than %s and" +
      " less than %s\'.format([rules.gt, rules.l" +
      "t]) : \'\'\n\276\001\n\030sfixed32.gt_lt_exclusive\032\241\001" +
      "has(rules.lt) && rules.lt < rules.gt && " +
      "(rules.lt <= this && this <= rules.gt)? " +
      "\'value must be greater than %s or less t" +
      "han %s\'.format([rules.gt, rules.lt]) : \'" +
      "\'\n\306\001\n\017sfixed32.gt_lte\032\262\001has(rules.lte) &" +
      "& rules.lte >= rules.gt && (this > rules" +
      ".lte || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than or equal" +
      " to %s\'.format([rules.gt, rules.lte]) : " +
      "\'\'\n\316\001\n\031sfixed32.gt_lte_exclusive\032\260\001has(r" +
      "ules.lte) && rules.lte < rules.gt && (ru" +
      "les.lte < this && this <= rules.gt)? \'va" +
      "lue must be greater than %s or less than" +
      " or equal to %s\'.format([rules.gt, rules" +
      ".lte]) : \'\'H\001R\002gt\022\367\007\n\003gte\030\005 \001(\017B\342\007\302H\336\007\n\213" +
      "\001\n\014sfixed32.gte\032{!has(rules.lt) && !has(" +
      "rules.lte) && this < rules.gte? \'value m" +
      "ust be greater than or equal to %s\'.form" +
      "at([rules.gte]) : \'\'\n\305\001\n\017sfixed32.gte_lt" +
      "\032\261\001has(rules.lt) && rules.lt >= rules.gt" +
      "e && (this >= rules.lt || this < rules.g" +
      "te)? \'value must be greater than or equa" +
      "l to %s and less than %s\'.format([rules." +
      "gte, rules.lt]) : \'\'\n\315\001\n\031sfixed32.gte_lt" +
      "_exclusive\032\257\001has(rules.lt) && rules.lt <" +
      " rules.gte && (rules.lt <= this && this " +
      "< rules.gte)? \'value must be greater tha" +
      "n or equal to %s or less than %s\'.format" +
      "([rules.gte, rules.lt]) : \'\'\n\325\001\n\020sfixed3" +
      "2.gte_lte\032\300\001has(rules.lte) && rules.lte " +
      ">= rules.gte && (this > rules.lte || thi" +
      "s < rules.gte)? \'value must be greater t" +
      "han or equal to %s and less than or equa" +
      "l to %s\'.format([rules.gte, rules.lte]) " +
      ": \'\'\n\335\001\n\032sfixed32.gte_lte_exclusive\032\276\001ha" +
      "s(rules.lte) && rules.lte < rules.gte &&" +
      " (rules.lte < this && this < rules.gte)?" +
      " \'value must be greater than or equal to" +
      " %s or less than or equal to %s\'.format(" +
      "[rules.gte, rules.lte]) : \'\'H\001R\003gte\022|\n\002i" +
      "n\030\006 \003(\017Bl\302Hi\ng\n\013sfixed32.in\032X!(this in d" +
      "yn(rules)[\'in\']) ? \'value must be in lis" +
      "t %s\'.format([dyn(rules)[\'in\']]) : \'\'R\002i" +
      "n\022\200\001\n\006not_in\030\007 \003(\017Bi\302Hf\nd\n\017sfixed32.not_" +
      "in\032Qthis in rules.not_in ? \'value must n" +
      "ot be in list %s\'.format([rules.not_in])" +
      " : \'\'R\005notInB\013\n\tless_thanB\016\n\014greater_tha" +
      "nB\010\n\006_const\"\223\025\n\rSFixed64Rules\022x\n\005const\030\001" +
      " \001(\020B]\302HZ\nX\n\016sfixed64.const\032Fthis != rul" +
      "es.const ? \'value must equal %s\'.format(" +
      "[rules.const]) : \'\'H\002R\005const\210\001\001\022\221\001\n\002lt\030\002" +
      " \001(\020B\177\302H|\nz\n\013sfixed64.lt\032k!has(rules.gte",
      ") && !has(rules.gt) && this >= rules.lt?" +
      " \'value must be less than %s\'.format([ru" +
      "les.lt]) : \'\'H\000R\002lt\022\244\001\n\003lte\030\003 \001(\020B\217\001\302H\213\001" +
      "\n\210\001\n\014sfixed64.lte\032x!has(rules.gte) && !h" +
      "as(rules.gt) && this > rules.lte? \'value" +
      " must be less than or equal to %s\'.forma" +
      "t([rules.lte]) : \'\'H\000R\003lte\022\252\007\n\002gt\030\004 \001(\020B" +
      "\227\007\302H\223\007\n}\n\013sfixed64.gt\032n!has(rules.lt) &&" +
      " !has(rules.lte) && this <= rules.gt? \'v" +
      "alue must be greater than %s\'.format([ru" +
      "les.gt]) : \'\'\n\266\001\n\016sfixed64.gt_lt\032\243\001has(r" +
      "ules.lt) && rules.lt >= rules.gt && (thi" +
      "s >= rules.lt || this <= rules.gt)? \'val" +
      "ue must be greater than %s and less than" +
      " %s\'.format([rules.gt, rules.lt]) : \'\'\n\276" +
      "\001\n\030sfixed64.gt_lt_exclusive\032\241\001has(rules." +
      "lt) && rules.lt < rules.gt && (rules.lt " +
      "<= this && this <= rules.gt)? \'value mus" +
      "t be greater than %s or less than %s\'.fo" +
      "rmat([rules.gt, rules.lt]) : \'\'\n\306\001\n\017sfix" +
      "ed64.gt_lte\032\262\001has(rules.lte) && rules.lt" +
      "e >= rules.gt && (this > rules.lte || th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s and less than or equal to %s\'.fo" +
      "rmat([rules.gt, rules.lte]) : \'\'\n\316\001\n\031sfi" +
      "xed64.gt_lte_exclusive\032\260\001has(rules.lte) " +
      "&& rules.lte < rules.gt && (rules.lte < " +
      "this && this <= rules.gt)? \'value must b" +
      "e greater than %s or less than or equal " +
      "to %s\'.format([rules.gt, rules.lte]) : \'" +
      "\'H\001R\002gt\022\367\007\n\003gte\030\005 \001(\020B\342\007\302H\336\007\n\213\001\n\014sfixed6" +
      "4.gte\032{!has(rules.lt) && !has(rules.lte)" +
      " && this < rules.gte? \'value must be gre" +
      "ater than or equal to %s\'.format([rules." +
      "gte]) : \'\'\n\305\001\n\017sfixed64.gte_lt\032\261\001has(rul" +
      "es.lt) && rules.lt >= rules.gte && (this" +
      " >= rules.lt || this < rules.gte)? \'valu" +
      "e must be greater than or equal to %s an" +
      "d less than %s\'.format([rules.gte, rules" +
      ".lt]) : \'\'\n\315\001\n\031sfixed64.gte_lt_exclusive" +
      "\032\257\001has(rules.lt) && rules.lt < rules.gte" +
      " && (rules.lt <= this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than %s\'.format([rules.gt" +
      "e, rules.lt]) : \'\'\n\325\001\n\020sfixed64.gte_lte\032" +
      "\300\001has(rules.lte) && rules.lte >= rules.g" +
      "te && (this > rules.lte || this < rules." +
      "gte)? \'value must be greater than or equ" +
      "al to %s and less than or equal to %s\'.f" +
      "ormat([rules.gte, rules.lte]) : \'\'\n\335\001\n\032s" +
      "fixed64.gte_lte_exclusive\032\276\001has(rules.lt" +
      "e) && rules.lte < rules.gte && (rules.lt" +
      "e < this && this < rules.gte)? \'value mu" +
      "st be greater than or equal to %s or les" +
      "s than or equal to %s\'.format([rules.gte" +
      ", rules.lte]) : \'\'H\001R\003gte\022|\n\002in\030\006 \003(\020Bl\302" +
      "Hi\ng\n\013sfixed64.in\032X!(this in dyn(rules)[" +
      "\'in\']) ? \'value must be in list %s\'.form" +
      "at([dyn(rules)[\'in\']]) : \'\'R\002in\022\200\001\n\006not_" +
      "in\030\007 \003(\020Bi\302Hf\nd\n\017sfixed64.not_in\032Qthis i" +
      "n rules.not_in ? \'value must not be in l" +
      "ist %s\'.format([rules.not_in]) : \'\'R\005not" +
      "InB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_cons" +
      "t\"\213\001\n\tBoolRules\022t\n\005const\030\001 \001(\010BY\302HV\nT\n\nb" +
      "ool.const\032Fthis != rules.const ? \'value " +
      "must equal %s\'.format([rules.const]) : \'" +
      "\'H\000R\005const\210\001\001B\010\n\006_const\"\3243\n\013StringRules\022" +
      "x\n\005const\030\001 \001(\tB]\302HZ\nX\n\014string.const\032Hthi" +
      "s != rules.const ? \'value must equal `%s" +
      "`\'.format([rules.const]) : \'\'H\001R\005const\210\001" +
      "\001\022\210\001\n\003len\030\023 \001(\004Bq\302Hn\nl\n\nstring.len\032^uint" +
      "(this.size()) != rules.len ? \'value leng" +
      "th must be %s characters\'.format([rules." +
      "len]) : \'\'H\002R\003len\210\001\001\022\246\001\n\007min_len\030\002 \001(\004B\207" +
      "\001\302H\203\001\n\200\001\n\016string.min_len\032nuint(this.size" +
      "()) < rules.min_len ? \'value length must" +
      " be at least %s characters\'.format([rule" +
      "s.min_len]) : \'\'H\003R\006minLen\210\001\001\022\244\001\n\007max_le" +
      "n\030\003 \001(\004B\205\001\302H\201\001\n\177\n\016string.max_len\032muint(t" +
      "his.size()) > rules.max_len ? \'value len" +
      "gth must be at most %s characters\'.forma" +
      "t([rules.max_len]) : \'\'H\004R\006maxLen\210\001\001\022\252\001\n" +
      "\tlen_bytes\030\024 \001(\004B\207\001\302H\203\001\n\200\001\n\020string.len_b" +
      "ytes\032luint(bytes(this).size()) != rules." +
      "len_bytes ? \'value length must be %s byt" +
      "es\'.format([rules.len_bytes]) : \'\'H\005R\010le" +
      "nBytes\210\001\001\022\262\001\n\tmin_bytes\030\004 \001(\004B\217\001\302H\213\001\n\210\001\n" +
      "\020string.min_bytes\032tuint(bytes(this).size" +
      "()) < rules.min_bytes ? \'value length mu" +
      "st be at least %s bytes\'.format([rules.m" +
      "in_bytes]) : \'\'H\006R\010minBytes\210\001\001\022\261\001\n\tmax_b" +
      "ytes\030\005 \001(\004B\216\001\302H\212\001\n\207\001\n\020string.max_bytes\032s" +
      "uint(bytes(this).size()) > rules.max_byt" +
      "es ? \'value length must be at most %s by" +
      "tes\'.format([rules.max_bytes]) : \'\'H\007R\010m" +
      "axBytes\210\001\001\022\233\001\n\007pattern\030\006 \001(\tB|\302Hy\nw\n\016str" +
      "ing.pattern\032e!this.matches(rules.pattern" +
      ") ? \'value does not match regex pattern " +
      "`%s`\'.format([rules.pattern]) : \'\'H\010R\007pa" +
      "ttern\210\001\001\022\221\001\n\006prefix\030\007 \001(\tBt\302Hq\no\n\rstring" +
      ".prefix\032^!this.startsWith(rules.prefix) " +
      "? \'value does not have prefix `%s`\'.form" +
      "at([rules.prefix]) : \'\'H\tR\006prefix\210\001\001\022\217\001\n" +
      "\006suffix\030\010 \001(\tBr\302Ho\nm\n\rstring.suffix\032\\!th" +
      "is.endsWith(rules.suffix) ? \'value does " +
      "not have suffix `%s`\'.format([rules.suff" +
      "ix]) : \'\'H\nR\006suffix\210\001\001\022\237\001\n\010contains\030\t \001(" +
      "\tB~\302H{\ny\n\017string.contains\032f!this.contain" +
      "s(rules.contains) ? \'value does not cont" +
      "ain substring `%s`\'.format([rules.contai" +
      "ns]) : \'\'H\013R\010contains\210\001\001\022\252\001\n\014not_contain" +
      "s\030\027 \001(\tB\201\001\302H~\n|\n\023string.not_contains\032eth" +
      "is.contains(rules.not_contains) ? \'value" +
      " contains substring `%s`\'.format([rules." +
      "not_contains]) : \'\'H\014R\013notContains\210\001\001\022z\n" +
      "\002in\030\n \003(\tBj\302Hg\ne\n\tstring.in\032X!(this in d" +
      "yn(rules)[\'in\']) ? \'value must be in lis" +
      "t %s\'.format([dyn(rules)[\'in\']]) : \'\'R\002i" +
      "n\022~\n\006not_in\030\013 \003(\tBg\302Hd\nb\n\rstring.not_in\032" +
      "Qthis in rules.not_in ? \'value must not " +
      "be in list %s\'.format([rules.not_in]) : " +
      "\'\'R\005notIn\022\306\001\n\005email\030\014 \001(\010B\255\001\302H\251\001\nQ\n\014stri" +
      "ng.email\022#value must be a valid email ad" +
      "dress\032\034this == \'\' || this.isEmail()\nT\n\022s" +
      "tring.email_empty\0222value is empty, which" +
      " is not a valid email address\032\nthis != \'" +
      "\'H\000R\005email\022\313\001\n\010hostname\030\r \001(\010B\254\001\302H\250\001\nR\n\017" +
      "string.hostname\022\036value must be a valid h" +
      "ostname\032\037this == \'\' || this.isHostname()" +
      "\nR\n\025string.hostname_empty\022-value is empt" +
      "y, which is not a valid hostname\032\nthis !" +
      "= \'\'H\000R\010hostname\022\261\001\n\002ip\030\016 \001(\010B\236\001\302H\232\001\nH\n\t" +
      "string.ip\022 value must be a valid IP addr" +
      "ess\032\031this == \'\' || this.isIp()\nN\n\017string" +
      ".ip_empty\022/value is empty, which is not " +
      "a valid IP address\032\nthis != \'\'H\000R\002ip\022\276\001\n" +
      "\004ipv4\030\017 \001(\010B\247\001\302H\243\001\nM\n\013string.ipv4\022\"value" +
      " must be a valid IPv4 address\032\032this == \'" +
      "\' || this.isIp(4)\nR\n\021string.ipv4_empty\0221" +
      "value is empty, which is not a valid IPv" +
      "4 address\032\nthis != \'\'H\000R\004ipv4\022\276\001\n\004ipv6\030\020" +
      " \001(\010B\247\001\302H\243\001\nM\n\013string.ipv6\022\"value must b" +
      "e a valid IPv6 address\032\032this == \'\' || th" +
      "is.isIp(6)\nR\n\021string.ipv6_empty\0221value i" +
      "s empty, which is not a valid IPv6 addre" +
      "ss\032\nthis != \'\'H\000R\004ipv6\022\250\001\n\003uri\030\021 \001(\010B\223\001\302" +
      "H\217\001\nC\n\nstring.uri\022\031value must be a valid" +
      " URI\032\032this == \'\' || this.isUri()\nH\n\020stri" +
      "ng.uri_empty\022(value is empty, which is n" +
      "ot a valid URI\032\nthis != \'\'H\000R\003uri\022\\\n\007uri" +
      "_ref\030\022 \001(\010BA\302H>\n<\n\016string.uri_ref\022\031value" +
      " must be a valid URI\032\017this.isUriRef()H\000R" +
      "\006uriRef\022\364\001\n\007address\030\025 \001(\010B\327\001\302H\323\001\no\n\016stri" +
      "ng.address\022-value must be a valid hostna" +
      "me, or ip address\032.this == \'\' || this.is" +
      "Hostname() || this.isIp()\n`\n\024string.addr" +
      "ess_empty\022<value is empty, which is not " +
      "a valid hostname, or ip address\032\nthis !=" +
      " \'\'H\000R\007address\022\200\002\n\004uuid\030\026 \001(\010B\351\001\302H\345\001\n\226\001\n" +
      "\013string.uuid\022\032value must be a valid UUID" +
      "\032kthis == \'\' || this.matches(\'^[0-9a-fA-" +
      "F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9" +
      "a-fA-F]{4}-[0-9a-fA-F]{12}$\')\nJ\n\021string." +
      "uuid_empty\022)value is empty, which is not" +
      " a valid UUID\032\nthis != \'\'H\000R\004uuid\022\357\001\n\021ip" +
      "_with_prefixlen\030\032 \001(\010B\300\001\302H\274\001\n\\\n\030string.i" +
      "p_with_prefixlen\022\037value must be a valid " +
      "IP prefix\032\037this == \'\' || this.isIpPrefix" +
      "()\n\\\n\036string.ip_with_prefixlen_empty\022.va" +
      "lue is empty, which is not a valid IP pr" +
      "efix\032\nthis != \'\'H\000R\017ipWithPrefixlen\022\244\002\n\023" +
      "ipv4_with_prefixlen\030\033 \001(\010B\361\001\302H\355\001\nu\n\032stri" +
      "ng.ipv4_with_prefixlen\0225value must be a " +
      "valid IPv4 address with prefix length\032 t" +
      "his == \'\' || this.isIpPrefix(4)\nt\n strin" +
      "g.ipv4_with_prefixlen_empty\022Dvalue is em" +
      "pty, which is not a valid IPv4 address w" +
      "ith prefix length\032\nthis != \'\'H\000R\021ipv4Wit" +
      "hPrefixlen\022\244\002\n\023ipv6_with_prefixlen\030\034 \001(\010" +
      "B\361\001\302H\355\001\nu\n\032string.ipv6_with_prefixlen\0225v" +
      "alue must be a valid IPv6 address with p" +
      "refix length\032 this == \'\' || this.isIpPre" +
      "fix(6)\nt\n string.ipv6_with_prefixlen_emp" +
      "ty\022Dvalue is empty, which is not a valid" +
      " IPv6 address with prefix length\032\nthis !" +
      "= \'\'H\000R\021ipv6WithPrefixlen\022\324\001\n\tip_prefix\030" +
      "\035 \001(\010B\264\001\302H\260\001\nX\n\020string.ip_prefix\022\037value " +
      "must be a valid IP prefix\032#this == \'\' ||" +
      " this.isIpPrefix(true)\nT\n\026string.ip_pref" +
      "ix_empty\022.value is empty, which is not a" +
      " valid IP prefix\032\nthis != \'\'H\000R\010ipPrefix" +
      "\022\343\001\n\013ipv4_prefix\030\036 \001(\010B\277\001\302H\273\001\n_\n\022string." +
      "ipv4_prefix\022!value must be a valid IPv4 " +
      "prefix\032&this == \'\' || this.isIpPrefix(4," +
      " true)\nX\n\030string.ipv4_prefix_empty\0220valu" +
      "e is empty, which is not a valid IPv4 pr" +
      "efix\032\nthis != \'\'H\000R\nipv4Prefix\022\343\001\n\013ipv6_" +
      "prefix\030\037 \001(\010B\277\001\302H\273\001\n_\n\022string.ipv6_prefi" +
      "x\022!value must be a valid IPv6 prefix\032&th" +
      "is == \'\' || this.isIpPrefix(6, true)\nX\n\030" +
      "string.ipv6_prefix_empty\0220value is empty" +
      ", which is not a valid IPv6 prefix\032\nthis" +
      " != \'\'H\000R\nipv6Prefix\022\222\002\n\rhost_and_port\030 " +
      " \001(\010B\353\001\302H\347\001\n\201\001\n\024string.host_and_port\022Ava" +
      "lue must be a valid host (hostname or IP" +
      " address) and port pair\032&this == \'\' || t" +
      "his.isHostAndPort(true)\na\n\032string.host_a" +
      "nd_port_empty\0227value is empty, which is " +
      "not a valid host and port pair\032\nthis != " +
      "\'\'H\000R\013hostAndPort\022\270\005\n\020well_known_regex\030\030" +
      " \001(\0162\030.buf.validate.KnownRegexB\361\004\302H\355\004\n\360\001" +
      "\n#string.well_known_regex.header_name\022&v" +
      "alue must be a valid HTTP header name\032\240\001" +
      "rules.well_known_regex != 1 || this == \'" +
      "\' || this.matches(!has(rules.strict) || " +
      "rules.strict ?\'^:?[0-9a-zA-Z!#$%&\\\'*+-.^" +
      "_|~\\x60]+$\' :\'^[^\\u0000\\u000A\\u000D]+$\')" +
      "\n\215\001\n)string.well_known_regex.header_name" +
      "_empty\0225value is empty, which is not a v" +
      "alid HTTP header name\032)rules.well_known_" +
      "regex != 1 || this != \'\'\n\347\001\n$string.well" +
      "_known_regex.header_value\022\'value must be" +
      " a valid HTTP header value\032\225\001rules.well_" +
      "known_regex != 2 || this.matches(!has(ru" +
      "les.strict) || rules.strict ?\'^[^\\u0000-" +
      "\\u0008\\u000A-\\u001F\\u007F]*$\' :\'^[^\\u000" +
      "0\\u000A\\u000D]*$\')H\000R\016wellKnownRegex\022\033\n\006" +
      "strict\030\031 \001(\010H\rR\006strict\210\001\001B\014\n\nwell_knownB" +
      "\010\n\006_constB\006\n\004_lenB\n\n\010_min_lenB\n\n\010_max_le" +
      "nB\014\n\n_len_bytesB\014\n\n_min_bytesB\014\n\n_max_by" +
      "tesB\n\n\010_patternB\t\n\007_prefixB\t\n\007_suffixB\013\n" +
      "\t_containsB\017\n\r_not_containsB\t\n\007_strict\"\216" +
      "\021\n\nBytesRules\022r\n\005const\030\001 \001(\014BW\302HT\nR\n\013byt" +
      "es.const\032Cthis != rules.const ? \'value m" +
      "ust be %x\'.format([rules.const]) : \'\'H\001R" +
      "\005const\210\001\001\022\202\001\n\003len\030\r \001(\004Bk\302Hh\nf\n\tbytes.le" +
      "n\032Yuint(this.size()) != rules.len ? \'val" +
      "ue length must be %s bytes\'.format([rule" +
      "s.len]) : \'\'H\002R\003len\210\001\001\022\235\001\n\007min_len\030\002 \001(\004" +
      "B\177\302H|\nz\n\rbytes.min_len\032iuint(this.size()" +
      ") < rules.min_len ? \'value length must b" +
      "e at least %s bytes\'.format([rules.min_l" +
      "en]) : \'\'H\003R\006minLen\210\001\001\022\225\001\n\007max_len\030\003 \001(\004" +
      "Bw\302Ht\nr\n\rbytes.max_len\032auint(this.size()" +
      ") > rules.max_len ? \'value must be at mo" +
      "st %s bytes\'.format([rules.max_len]) : \'" +
      "\'H\004R\006maxLen\210\001\001\022\236\001\n\007pattern\030\004 \001(\tB\177\302H|\nz\n" +
      "\rbytes.pattern\032i!string(this).matches(ru" +
      "les.pattern) ? \'value must match regex p" +
      "attern `%s`\'.format([rules.pattern]) : \'" +
      "\'H\005R\007pattern\210\001\001\022\216\001\n\006prefix\030\005 \001(\014Bq\302Hn\nl\n" +
      "\014bytes.prefix\032\\!this.startsWith(rules.pr" +
      "efix) ? \'value does not have prefix %x\'." +
      "format([rules.prefix]) : \'\'H\006R\006prefix\210\001\001" +
      "\022\214\001\n\006suffix\030\006 \001(\014Bo\302Hl\nj\n\014bytes.suffix\032Z" +
      "!this.endsWith(rules.suffix) ? \'value do" +
      "es not have suffix %x\'.format([rules.suf" +
      "fix]) : \'\'H\007R\006suffix\210\001\001\022\222\001\n\010contains\030\007 \001" +
      "(\014Bq\302Hn\nl\n\016bytes.contains\032Z!this.contain" +
      "s(rules.contains) ? \'value does not cont" +
      "ain %x\'.format([rules.contains]) : \'\'H\010R" +
      "\010contains\210\001\001\022\233\001\n\002in\030\010 \003(\014B\212\001\302H\206\001\n\203\001\n\010byt" +
      "es.in\032wdyn(rules)[\'in\'].size() > 0 && !(" +
      "this in dyn(rules)[\'in\']) ? \'value must " +
      "be in list %s\'.format([dyn(rules)[\'in\']]" +
      ") : \'\'R\002in\022}\n\006not_in\030\t \003(\014Bf\302Hc\na\n\014bytes" +
      ".not_in\032Qthis in rules.not_in ? \'value m" +
      "ust not be in list %s\'.format([rules.not" +
      "_in]) : \'\'R\005notIn\022\325\001\n\002ip\030\n \001(\010B\302\001\302H\276\001\ng\n" +
      "\010bytes.ip\022 value must be a valid IP addr" +
      "ess\0329this.size() == 0 || this.size() == " +
      "4 || this.size() == 16\nS\n\016bytes.ip_empty" +
      "\022/value is empty, which is not a valid I" +
      "P address\032\020this.size() != 0H\000R\002ip\022\314\001\n\004ip" +
      "v4\030\013 \001(\010B\265\001\302H\261\001\nV\n\nbytes.ipv4\022\"value mus" +
      "t be a valid IPv4 address\032$this.size() =" +
      "= 0 || this.size() == 4\nW\n\020bytes.ipv4_em" +
      "pty\0221value is empty, which is not a vali" +
      "d IPv4 address\032\020this.size() != 0H\000R\004ipv4" +
      "\022\315\001\n\004ipv6\030\014 \001(\010B\266\001\302H\262\001\nW\n\nbytes.ipv6\022\"va" +
      "lue must be a valid IPv6 address\032%this.s" +
      "ize() == 0 || this.size() == 16\nW\n\020bytes" +
      ".ipv6_empty\0221value is empty, which is no" +
      "t a valid IPv6 address\032\020this.size() != 0" +
      "H\000R\004ipv6B\014\n\nwell_knownB\010\n\006_constB\006\n\004_len" +
      "B\n\n\010_min_lenB\n\n\010_max_lenB\n\n\010_patternB\t\n\007" +
      "_prefixB\t\n\007_suffixB\013\n\t_contains\"\274\003\n\tEnum" +
      "Rules\022t\n\005const\030\001 \001(\005BY\302HV\nT\n\nenum.const\032" +
      "Fthis != rules.const ? \'value must equal" +
      " %s\'.format([rules.const]) : \'\'H\000R\005const" +
      "\210\001\001\022&\n\014defined_only\030\002 \001(\010H\001R\013definedOnly" +
      "\210\001\001\022x\n\002in\030\003 \003(\005Bh\302He\nc\n\007enum.in\032X!(this " +
      "in dyn(rules)[\'in\']) ? \'value must be in" +
      " list %s\'.format([dyn(rules)[\'in\']]) : \'" +
      "\'R\002in\022|\n\006not_in\030\004 \003(\005Be\302Hb\n`\n\013enum.not_i" +
      "n\032Qthis in rules.not_in ? \'value must no" +
      "t be in list %s\'.format([rules.not_in]) " +
      ": \'\'R\005notInB\010\n\006_constB\017\n\r_defined_only\"\315" +
      "\004\n\rRepeatedRules\022\255\001\n\tmin_items\030\001 \001(\004B\212\001\302" +
      "H\206\001\n\203\001\n\022repeated.min_items\032muint(this.si" +
      "ze()) < rules.min_items ? \'value must co" +
      "ntain at least %d item(s)\'.format([rules" +
      ".min_items]) : \'\'H\000R\010minItems\210\001\001\022\261\001\n\tmax" +
      "_items\030\002 \001(\004B\216\001\302H\212\001\n\207\001\n\022repeated.max_ite" +
      "ms\032quint(this.size()) > rules.max_items " +
      "? \'value must contain no more than %s it" +
      "em(s)\'.format([rules.max_items]) : \'\'H\001R" +
      "\010maxItems\210\001\001\022l\n\006unique\030\003 \001(\010BO\302HL\nJ\n\017rep" +
      "eated.unique\022(repeated value must contai" +
      "n unique items\032\rthis.unique()H\002R\006unique\210" +
      "\001\001\0229\n\005items\030\004 \001(\0132\036.buf.validate.FieldCo" +
      "nstraintsH\003R\005items\210\001\001B\014\n\n_min_itemsB\014\n\n_" +
      "max_itemsB\t\n\007_uniqueB\010\n\006_items\"\361\003\n\010MapRu" +
      "les\022\236\001\n\tmin_pairs\030\001 \001(\004B|\302Hy\nw\n\rmap.min_" +
      "pairs\032fuint(this.size()) < rules.min_pai" +
      "rs ? \'map must be at least %d entries\'.f" +
      "ormat([rules.min_pairs]) : \'\'H\000R\010minPair" +
      "s\210\001\001\022\235\001\n\tmax_pairs\030\002 \001(\004B{\302Hx\nv\n\rmap.max" +
      "_pairs\032euint(this.size()) > rules.max_pa" +
      "irs ? \'map must be at most %d entries\'.f" +
      "ormat([rules.max_pairs]) : \'\'H\001R\010maxPair" +
      "s\210\001\001\0227\n\004keys\030\004 \001(\0132\036.buf.validate.FieldC" +
      "onstraintsH\002R\004keys\210\001\001\022;\n\006values\030\005 \001(\0132\036." +
      "buf.validate.FieldConstraintsH\003R\006values\210" +
      "\001\001B\014\n\n_min_pairsB\014\n\n_max_pairsB\007\n\005_keysB" +
      "\t\n\007_values\"1\n\010AnyRules\022\016\n\002in\030\002 \003(\tR\002in\022\025" +
      "\n\006not_in\030\003 \003(\tR\005notIn\"\322\026\n\rDurationRules\022" +
      "\223\001\n\005const\030\002 \001(\0132\031.google.protobuf.Durati" +
      "onB]\302HZ\nX\n\016duration.const\032Fthis != rules" +
      ".const ? \'value must equal %s\'.format([r" +
      "ules.const]) : \'\'H\002R\005const\210\001\001\022\254\001\n\002lt\030\003 \001" +
      "(\0132\031.google.protobuf.DurationB\177\302H|\nz\n\013du" +
      "ration.lt\032k!has(rules.gte) && !has(rules" +
      ".gt) && this >= rules.lt? \'value must be" +
      " less than %s\'.format([rules.lt]) : \'\'H\000" +
      "R\002lt\022\277\001\n\003lte\030\004 \001(\0132\031.google.protobuf.Dur" +
      "ationB\217\001\302H\213\001\n\210\001\n\014duration.lte\032x!has(rule" +
      "s.gte) && !has(rules.gt) && this > rules" +
      ".lte? \'value must be less than or equal " +
      "to %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\305" +
      "\007\n\002gt\030\005 \001(\0132\031.google.protobuf.DurationB\227" +
      "\007\302H\223\007\n}\n\013duration.gt\032n!has(rules.lt) && " +
      "!has(rules.lte) && this <= rules.gt? \'va" +
      "lue must be greater than %s\'.format([rul" +
      "es.gt]) : \'\'\n\266\001\n\016duration.gt_lt\032\243\001has(ru" +
      "les.lt) && rules.lt >= rules.gt && (this" +
      " >= rules.lt || this <= rules.gt)? \'valu" +
      "e must be greater than %s and less than " +
      "%s\'.format([rules.gt, rules.lt]) : \'\'\n\276\001" +
      "\n\030duration.gt_lt_exclusive\032\241\001has(rules.l" +
      "t) && rules.lt < rules.gt && (rules.lt <" +
      "= this && this <= rules.gt)? \'value must" +
      " be greater than %s or less than %s\'.for" +
      "mat([rules.gt, rules.lt]) : \'\'\n\306\001\n\017durat" +
      "ion.gt_lte\032\262\001has(rules.lte) && rules.lte" +
      " >= rules.gt && (this > rules.lte || thi" +
      "s <= rules.gt)? \'value must be greater t" +
      "han %s and less than or equal to %s\'.for" +
      "mat([rules.gt, rules.lte]) : \'\'\n\316\001\n\031dura" +
      "tion.gt_lte_exclusive\032\260\001has(rules.lte) &" +
      "& rules.lte < rules.gt && (rules.lte < t" +
      "his && this <= rules.gt)? \'value must be" +
      " greater than %s or less than or equal t" +
      "o %s\'.format([rules.gt, rules.lte]) : \'\'" +
      "H\001R\002gt\022\222\010\n\003gte\030\006 \001(\0132\031.google.protobuf.D" +
      "urationB\342\007\302H\336\007\n\213\001\n\014duration.gte\032{!has(ru" +
      "les.lt) && !has(rules.lte) && this < rul" +
      "es.gte? \'value must be greater than or e" +
      "qual to %s\'.format([rules.gte]) : \'\'\n\305\001\n" +
      "\017duration.gte_lt\032\261\001has(rules.lt) && rule" +
      "s.lt >= rules.gte && (this >= rules.lt |" +
      "| this < rules.gte)? \'value must be grea" +
      "ter than or equal to %s and less than %s" +
      "\'.format([rules.gte, rules.lt]) : \'\'\n\315\001\n" +
      "\031duration.gte_lt_exclusive\032\257\001has(rules.l" +
      "t) && rules.lt < rules.gte && (rules.lt " +
      "<= this && this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s or less" +
      " than %s\'.format([rules.gte, rules.lt]) " +
      ": \'\'\n\325\001\n\020duration.gte_lte\032\300\001has(rules.lt" +
      "e) && rules.lte >= rules.gte && (this > " +
      "rules.lte || this < rules.gte)? \'value m" +
      "ust be greater than or equal to %s and l" +
      "ess than or equal to %s\'.format([rules.g" +
      "te, rules.lte]) : \'\'\n\335\001\n\032duration.gte_lt" +
      "e_exclusive\032\276\001has(rules.lte) && rules.lt" +
      "e < rules.gte && (rules.lte < this && th" +
      "is < rules.gte)? \'value must be greater " +
      "than or equal to %s or less than or equa" +
      "l to %s\'.format([rules.gte, rules.lte]) " +
      ": \'\'H\001R\003gte\022\227\001\n\002in\030\007 \003(\0132\031.google.protob" +
      "uf.DurationBl\302Hi\ng\n\013duration.in\032X!(this " +
      "in dyn(rules)[\'in\']) ? \'value must be in" +
      " list %s\'.format([dyn(rules)[\'in\']]) : \'" +
      "\'R\002in\022\233\001\n\006not_in\030\010 \003(\0132\031.google.protobuf" +
      ".DurationBi\302Hf\nd\n\017duration.not_in\032Qthis " +
      "in rules.not_in ? \'value must not be in " +
      "list %s\'.format([rules.not_in]) : \'\'R\005no" +
      "tInB\013\n\tless_thanB\016\n\014greater_thanB\010\n\006_con" +
      "st\"\312\027\n\016TimestampRules\022\225\001\n\005const\030\002 \001(\0132\032.",
      "google.protobuf.TimestampB^\302H[\nY\n\017timest" +
      "amp.const\032Fthis != rules.const ? \'value " +
      "must equal %s\'.format([rules.const]) : \'" +
      "\'H\002R\005const\210\001\001\022\257\001\n\002lt\030\003 \001(\0132\032.google.prot" +
      "obuf.TimestampB\200\001\302H}\n{\n\014timestamp.lt\032k!h" +
      "as(rules.gte) && !has(rules.gt) && this " +
      ">= rules.lt? \'value must be less than %s" +
      "\'.format([rules.lt]) : \'\'H\000R\002lt\022\301\001\n\003lte\030" +
      "\004 \001(\0132\032.google.protobuf.TimestampB\220\001\302H\214\001" +
      "\n\211\001\n\rtimestamp.lte\032x!has(rules.gte) && !" +
      "has(rules.gt) && this > rules.lte? \'valu" +
      "e must be less than or equal to %s\'.form" +
      "at([rules.lte]) : \'\'H\000R\003lte\022a\n\006lt_now\030\007 " +
      "\001(\010BH\302HE\nC\n\020timestamp.lt_now\032/this > now" +
      " ? \'value must be less than now\' : \'\'H\000R" +
      "\005ltNow\022\313\007\n\002gt\030\005 \001(\0132\032.google.protobuf.Ti" +
      "mestampB\234\007\302H\230\007\n~\n\014timestamp.gt\032n!has(rul" +
      "es.lt) && !has(rules.lte) && this <= rul" +
      "es.gt? \'value must be greater than %s\'.f" +
      "ormat([rules.gt]) : \'\'\n\267\001\n\017timestamp.gt_" +
      "lt\032\243\001has(rules.lt) && rules.lt >= rules." +
      "gt && (this >= rules.lt || this <= rules" +
      ".gt)? \'value must be greater than %s and" +
      " less than %s\'.format([rules.gt, rules.l" +
      "t]) : \'\'\n\277\001\n\031timestamp.gt_lt_exclusive\032\241" +
      "\001has(rules.lt) && rules.lt < rules.gt &&" +
      " (rules.lt <= this && this <= rules.gt)?" +
      " \'value must be greater than %s or less " +
      "than %s\'.format([rules.gt, rules.lt]) : " +
      "\'\'\n\307\001\n\020timestamp.gt_lte\032\262\001has(rules.lte)" +
      " && rules.lte >= rules.gt && (this > rul" +
      "es.lte || this <= rules.gt)? \'value must" +
      " be greater than %s and less than or equ" +
      "al to %s\'.format([rules.gt, rules.lte]) " +
      ": \'\'\n\317\001\n\032timestamp.gt_lte_exclusive\032\260\001ha" +
      "s(rules.lte) && rules.lte < rules.gt && " +
      "(rules.lte < this && this <= rules.gt)? " +
      "\'value must be greater than %s or less t" +
      "han or equal to %s\'.format([rules.gt, ru" +
      "les.lte]) : \'\'H\001R\002gt\022\230\010\n\003gte\030\006 \001(\0132\032.goo" +
      "gle.protobuf.TimestampB\347\007\302H\343\007\n\214\001\n\rtimest" +
      "amp.gte\032{!has(rules.lt) && !has(rules.lt" +
      "e) && this < rules.gte? \'value must be g" +
      "reater than or equal to %s\'.format([rule" +
      "s.gte]) : \'\'\n\306\001\n\020timestamp.gte_lt\032\261\001has(" +
      "rules.lt) && rules.lt >= rules.gte && (t" +
      "his >= rules.lt || this < rules.gte)? \'v" +
      "alue must be greater than or equal to %s" +
      " and less than %s\'.format([rules.gte, ru" +
      "les.lt]) : \'\'\n\316\001\n\032timestamp.gte_lt_exclu" +
      "sive\032\257\001has(rules.lt) && rules.lt < rules" +
      ".gte && (rules.lt <= this && this < rule" +
      "s.gte)? \'value must be greater than or e" +
      "qual to %s or less than %s\'.format([rule" +
      "s.gte, rules.lt]) : \'\'\n\326\001\n\021timestamp.gte" +
      "_lte\032\300\001has(rules.lte) && rules.lte >= ru" +
      "les.gte && (this > rules.lte || this < r" +
      "ules.gte)? \'value must be greater than o" +
      "r equal to %s and less than or equal to " +
      "%s\'.format([rules.gte, rules.lte]) : \'\'\n" +
      "\336\001\n\033timestamp.gte_lte_exclusive\032\276\001has(ru" +
      "les.lte) && rules.lte < rules.gte && (ru" +
      "les.lte < this && this < rules.gte)? \'va" +
      "lue must be greater than or equal to %s " +
      "or less than or equal to %s\'.format([rul" +
      "es.gte, rules.lte]) : \'\'H\001R\003gte\022d\n\006gt_no" +
      "w\030\010 \001(\010BK\302HH\nF\n\020timestamp.gt_now\0322this <" +
      " now ? \'value must be greater than now\' " +
      ": \'\'H\001R\005gtNow\022\305\001\n\006within\030\t \001(\0132\031.google." +
      "protobuf.DurationB\214\001\302H\210\001\n\205\001\n\020timestamp.w" +
      "ithin\032qthis < now-rules.within || this >" +
      " now+rules.within ? \'value must be withi" +
      "n %s of now\'.format([rules.within]) : \'\'" +
      "H\003R\006within\210\001\001B\013\n\tless_thanB\016\n\014greater_th" +
      "anB\010\n\006_constB\t\n\007_within*F\n\006Ignore\022\026\n\022IGN" +
      "ORE_UNSPECIFIED\020\000\022\020\n\014IGNORE_EMPTY\020\001\022\022\n\016I" +
      "GNORE_DEFAULT\020\002*n\n\nKnownRegex\022\033\n\027KNOWN_R" +
      "EGEX_UNSPECIFIED\020\000\022 \n\034KNOWN_REGEX_HTTP_H" +
      "EADER_NAME\020\001\022!\n\035KNOWN_REGEX_HTTP_HEADER_" +
      "VALUE\020\002:_\n\007message\022\037.google.protobuf.Mes" +
      "sageOptions\030\207\t \001(\0132 .buf.validate.Messag" +
      "eConstraintsR\007message\210\001\001:W\n\005oneof\022\035.goog" +
      "le.protobuf.OneofOptions\030\207\t \001(\0132\036.buf.va" +
      "lidate.OneofConstraintsR\005oneof\210\001\001:W\n\005fie" +
      "ld\022\035.google.protobuf.FieldOptions\030\207\t \001(\013" +
      "2\036.buf.validate.FieldConstraintsR\005field\210" +
      "\001\001B\300\001\n\020com.buf.validateB\rValidateProtoH\002" +
      "P\001ZGbuf.build/gen/go/bufbuild/protovalid" +
      "ate/protocolbuffers/go/buf/validate\370\001\000\242\002" +
      "\003BVX\252\002\014Buf.Validate\312\002\014Buf\\Validate\342\002\030Buf" +
      "\\Validate\\GPBMetadata\352\002\rBuf::Validateb\006p" +
      "roto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.buf.validate.ExpressionProto.getDescriptor(),
          com.buf.validate.priv.PrivateProto.getDescriptor(),
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_buf_validate_MessageConstraints_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_buf_validate_MessageConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_MessageConstraints_descriptor,
        new java.lang.String[] { "Disabled", "Cel", });
    internal_static_buf_validate_OneofConstraints_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_buf_validate_OneofConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_OneofConstraints_descriptor,
        new java.lang.String[] { "Required", });
    internal_static_buf_validate_FieldConstraints_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_buf_validate_FieldConstraints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_FieldConstraints_descriptor,
        new java.lang.String[] { "Cel", "Skipped", "Required", "IgnoreEmpty", "Ignore", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp", "Type", });
    internal_static_buf_validate_FloatRules_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_buf_validate_FloatRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_FloatRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "LessThan", "GreaterThan", });
    internal_static_buf_validate_DoubleRules_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_buf_validate_DoubleRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_DoubleRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Int32Rules_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_buf_validate_Int32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Int32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Int64Rules_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_buf_validate_Int64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Int64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_UInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_buf_validate_UInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_UInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_UInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_buf_validate_UInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_UInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_buf_validate_SInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_buf_validate_SInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Fixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_buf_validate_Fixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Fixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Fixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_buf_validate_Fixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_Fixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SFixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_buf_validate_SFixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SFixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SFixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_buf_validate_SFixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_SFixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_BoolRules_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_buf_validate_BoolRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_BoolRules_descriptor,
        new java.lang.String[] { "Const", });
    internal_static_buf_validate_StringRules_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_buf_validate_StringRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_StringRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "IpWithPrefixlen", "Ipv4WithPrefixlen", "Ipv6WithPrefixlen", "IpPrefix", "Ipv4Prefix", "Ipv6Prefix", "HostAndPort", "WellKnownRegex", "Strict", "WellKnown", });
    internal_static_buf_validate_BytesRules_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_buf_validate_BytesRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_BytesRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6", "WellKnown", });
    internal_static_buf_validate_EnumRules_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_buf_validate_EnumRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_EnumRules_descriptor,
        new java.lang.String[] { "Const", "DefinedOnly", "In", "NotIn", });
    internal_static_buf_validate_RepeatedRules_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_buf_validate_RepeatedRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_RepeatedRules_descriptor,
        new java.lang.String[] { "MinItems", "MaxItems", "Unique", "Items", });
    internal_static_buf_validate_MapRules_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_buf_validate_MapRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_MapRules_descriptor,
        new java.lang.String[] { "MinPairs", "MaxPairs", "Keys", "Values", });
    internal_static_buf_validate_AnyRules_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_buf_validate_AnyRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_AnyRules_descriptor,
        new java.lang.String[] { "In", "NotIn", });
    internal_static_buf_validate_DurationRules_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_buf_validate_DurationRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_DurationRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "LessThan", "GreaterThan", });
    internal_static_buf_validate_TimestampRules_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_buf_validate_TimestampRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buf_validate_TimestampRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "LtNow", "Gt", "Gte", "GtNow", "Within", "LessThan", "GreaterThan", });
    message.internalInit(descriptor.getExtensions().get(0));
    oneof.internalInit(descriptor.getExtensions().get(1));
    field.internalInit(descriptor.getExtensions().get(2));
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.buf.validate.priv.PrivateProto.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.buf.validate.ExpressionProto.getDescriptor();
    com.buf.validate.priv.PrivateProto.getDescriptor();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
